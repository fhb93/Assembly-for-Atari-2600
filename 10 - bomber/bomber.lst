------- FILE bomber.asm LEVEL 1 PASS 2
      1  10000 ????						; Final Project code stub - paused in lecture 75
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      6  10000 ????						;;  Include required files VCS register memory mapping and macros
      7  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  10000 ????
------- FILE ../UTILS/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"../UTILS/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01 	     Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;	      - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;		it is safe to leave it undefined, and the base address will
     38  10000 ????						;		be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0 22/MAR/2003   Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000
     76 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     77 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     78 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     79 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     80 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     81 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     82 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     83 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     84 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     85 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     86 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     87 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     88 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     89 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     90 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     91 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     92 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     93 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     94 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     95 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     96 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     97 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     98 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     99 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    100 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    101 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    102 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    103 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    104 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    105 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    106 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    107 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    108 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    109 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    110 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    111 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    112 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    113 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    114 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    115 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    116 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    117 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    118 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    119 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    120 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    121 U002d
    122 U002d							;-------------------------------------------------------------------------------
    123 U000e ????				      SEG.U	TIA_REGISTERS_READ
    124 U0000					      ORG	TIA_BASE_READ_ADDRESS
    125 U0000							;		       bit 7   bit 6
    126 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    127 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    128 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    129 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    130 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    131 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    132 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    133 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    134 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    135 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    136 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    137 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    138 U000c		       00	   INPT4      ds	1	; $0C	 x000 0000	 Read Input (Trigger) 0
    139 U000d		       00	   INPT5      ds	1	; $0D	 x000 0000	 Read Input (Trigger) 1
    140 U000e							;-------------------------------------------------------------------------------
    141 U0298 ????				      SEG.U	RIOT
    142 U0280					      ORG	$280
    143 U0280
    144 U0280							; RIOT MEMORY MAP
    145 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    146 U0281							;     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    147 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    148 U0282		       00	   SWCHB      ds	1	; $282    Port B data (console switches)
    149 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    150 U0284		       00	   INTIM      ds	1	; $284    Timer output
    151 U0285		       00	   TIMINT     ds	1	; $285
    152 U0286							; Unused/undefined registers ($285-$294)
    153 U0286		       00		      ds	1	; $286
    154 U0287		       00		      ds	1	; $287
    155 U0288		       00		      ds	1	; $288
    156 U0289		       00		      ds	1	; $289
    157 U028a		       00		      ds	1	; $28A
    158 U028b		       00		      ds	1	; $28B
    159 U028c		       00		      ds	1	; $28C
    160 U028d		       00		      ds	1	; $28D
    161 U028e		       00		      ds	1	; $28E
    162 U028f		       00		      ds	1	; $28F
    163 U0290		       00		      ds	1	; $290
    164 U0291		       00		      ds	1	; $291
    165 U0292		       00		      ds	1	; $292
    166 U0293		       00		      ds	1	; $293
    167 U0294		       00	   TIM1T      ds	1	; $294    set 1 clock interval
    168 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    169 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    170 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    171 U0298							;-------------------------------------------------------------------------------
    172 U0298							; The following required for back-compatibility with code which does not use
    173 U0298							; segments.
    174  0000 ????				      SEG
    175  0000 ????						; EOF
------- FILE bomber.asm
------- FILE ../UTILS/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"../UTILS/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0 22/MAR/2003   Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomber.asm
     11  0000 ????
     12  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     13  0000 ????						;;  Declare the variable starting from memory adderss $80
     14  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     15  0000 ????
     16 U009b ????				      seg.u	Variables
     17 U0080					      org	$80
     18 U0080
     19 U0080		       00	   JetXPos    byte.b		; player0 x-position
     20 U0081		       00	   JetYPos    byte.b		; player0 y-position
     21 U0082		       00	   BomberXPos byte.b		; player1 x-position (enemy x)
     22 U0083		       00	   BomberYPos byte.b		; player1 y-position (enemy y)
     23 U0084		       00	   MissileXPos byte.b		; missile x-position
     24 U0085		       00	   MissileYPos byte.b		; missile y-position
     25 U0086		       00	   Score      byte.b		; 2-digit score stored as BCD
     26 U0087		       00	   Timer      byte.b		; 2-digit timer stored as BCD
     27 U0088		       00	   Temp       byte.b		; auxiliary variable to store temp score values
     28 U0089		       00 00	   OnesDigitOffset word.w		; lookup table offset for the score 1's digit
     29 U008b		       00 00	   TensDigitOffset word.w		; lookup table offset for the score 10's digit
     30 U008d		       00 00	   P0SpritePtr word.w		; pointer to player0 sprite lookup table
     31 U008f		       00 00	   P0ColorPtr word.w		; pointer to player0 color lookup table
     32 U0091		       00 00	   P1SpritePtr word.w		; pointer to enemy sprite lookup table
     33 U0093		       00 00	   P1ColorPtr word.w		; pointer to enemy color lookup table
     34 U0095		       00	   P0AnimOffset byte.b		; player0 sprite frame offset for "animation"
     35 U0096		       00	   Random     byte.b		; random number generated to set enemy position
     36 U0097		       00	   ScoreSprite byte.b		; store the sprite bit pattern for the score
     37 U0098		       00	   TimerSprite byte.b		; store the sprite bit pattern for the timer
     38 U0099		       00	   TerrainColor byte.b		; store the color of the terrain
     39 U009a		       00	   RiverColor byte.b		; store the color of the river
     40 U009b
     41 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42 U009b							;;  Define constants  
     43 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44 U009b		       00 09	   P0_HEIGHT  =	9	; player0 sprite height (# rows in lookup table)
     45 U009b		       00 09	   P1_HEIGHT  =	9	; player1 sprite height (# rows in lookup table)
     46 U009b		       00 05	   DIGITS_HEIGHT =	5	; scoreboard digit height (#rows in lookup table)
     47 U009b
     48 U009b							;; below code can be possible as an alternative
     49 U009b							;; P0_HEIGHT = . - P0Frame0
     50 U009b
     51 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     52 U009b							;;  Start our ROM code at memory address $F000  
     53 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54 U009b
     55  10000 ????				       seg	Code
     56  f000					      org	$F000
     57  f000
     58  f000				   Reset
      0  f000					      CLEAN_START		; call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     60  f00b
     61  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     62  f00b							;;  Initialize RAM variables and TIA registers 
     63  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     64  f00b		       a9 0a		      lda	#10
     65  f00d		       85 81		      sta	JetYPos	; JetYPos = 10
     66  f00f		       a9 44		      lda	#68
     67  f011		       85 80		      sta	JetXPos	; JetXPos = 0
     68  f013		       a9 53		      lda	#83
     69  f015		       85 83		      sta	BomberYPos
     70  f017		       a9 3e		      lda	#62
     71  f019		       85 82		      sta	BomberXPos
     72  f01b		       a9 d4		      lda	#%11010100
     73  f01d		       85 96		      sta	Random	; Random = $D4
     74  f01f		       a9 00		      lda	#0
     75  f021		       85 86		      sta	Score
     76  f023		       a9 00		      lda	#0
     77  f025		       85 87		      sta	Timer	; Score = Timer = 0
     78  f027
     79  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  f027							;;  Declare a MACRO to check if we should display the missile 0 
     81  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  f027					      MAC	draw_missile
     83  f027							; x has the number of the scanline
     84  f027					      lda	#%00000000
     85  f027					      cpx	MissileYPos	; compare X (current scanline) with missile Y pos
     86  f027					      bne	.SkipMissileDraw	; if (X != missile Y position), then skip draw
     87  f027				   .DrawMissile
     88  f027					      lda	#%00000010	; else: enable missile 0 display	 
     89  f027					      inc	MissileYPos	;	 MissileYPos++
     90  f027				   .SkipMissileDraw
     91  f027					      sta	ENAM0	; store correct value in the TIA Missile register    
     92  f027					      ENDM
     93  f027
     94  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     95  f027							;;  Initialize the pointers to the correct lookup table addresses 
     96  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     97  f027		       a9 2c		      lda	#<P0Frame1
     98  f029		       85 8d		      sta	P0SpritePtr	; lo-byte pointer for player sprite lookup table
     99  f02b		       a9 f3		      lda	#>P0Frame1
    100  f02d		       85 8e		      sta	P0SpritePtr+1	; hi-byte pointer for player sprite lookup table
    101  f02f
    102  f02f		       a9 50		      lda	#<P0ColorFrame1
    103  f031		       85 8f		      sta	P0ColorPtr
    104  f033		       a9 f3		      lda	#>P0ColorFrame1
    105  f035		       85 90		      sta	P0ColorPtr+1
    106  f037
    107  f037		       a9 3e		      lda	#<P1Frame0
    108  f039		       85 91		      sta	P1SpritePtr	; lo-byte pointer for enemy sprite lookup table
    109  f03b		       a9 f3		      lda	#>P1Frame0
    110  f03d		       85 92		      sta	P1SpritePtr+1	; hi-byte pointer for enemy sprite lookup table
    111  f03f
    112  f03f		       a9 62		      lda	#<P1ColorFrame0
    113  f041		       85 93		      sta	P1ColorPtr
    114  f043		       a9 f3		      lda	#>P1ColorFrame0
    115  f045		       85 94		      sta	P1ColorPtr+1
    116  f047
    117  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    118  f047							;;  Start the main display loop and frame rendering 
    119  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    120  f047				   StartFrame
    121  f047
    122  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    123  f047							;;  Display VSYNC and VBLANK 
    124  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    125  f047		       a9 02		      lda	#2
    126  f049		       85 01		      sta	VBLANK	; turn on VBLANK (0010)
    127  f04b		       85 00		      sta	VSYNC	; turn on VSYNC
    128  f04d					      REPEAT	3
    129  f04d		       85 02		      sta	WSYNC	; display 3 recommended liens of VSYNC    
    128  f04d					      REPEND
    129  f04f		       85 02		      sta	WSYNC	; display 3 recommended liens of VSYNC    
    128  f04f					      REPEND
    129  f051		       85 02		      sta	WSYNC	; display 3 recommended liens of VSYNC    
    130  f053					      REPEND
    131  f053		       a9 00		      lda	#0
    132  f055		       85 00		      sta	VSYNC	; turn off VSYNC 
    133  f057					      REPEAT	33
    134  f057		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f057					      REPEND
    134  f059		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f059					      REPEND
    134  f05b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f05b					      REPEND
    134  f05d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f05d					      REPEND
    134  f05f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f05f					      REPEND
    134  f061		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f061					      REPEND
    134  f063		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f063					      REPEND
    134  f065		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f065					      REPEND
    134  f067		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f067					      REPEND
    134  f069		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f069					      REPEND
    134  f06b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f06b					      REPEND
    134  f06d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f06d					      REPEND
    134  f06f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f06f					      REPEND
    134  f071		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f071					      REPEND
    134  f073		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f073					      REPEND
    134  f075		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f075					      REPEND
    134  f077		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f077					      REPEND
    134  f079		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f079					      REPEND
    134  f07b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f07b					      REPEND
    134  f07d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f07d					      REPEND
    134  f07f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f07f					      REPEND
    134  f081		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f081					      REPEND
    134  f083		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f083					      REPEND
    134  f085		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f085					      REPEND
    134  f087		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f087					      REPEND
    134  f089		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f089					      REPEND
    134  f08b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f08b					      REPEND
    134  f08d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f08d					      REPEND
    134  f08f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f08f					      REPEND
    134  f091		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f091					      REPEND
    134  f093		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f093					      REPEND
    134  f095		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    133  f095					      REPEND
    134  f097		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    135  f099					      REPEND
    136  f099
    137  f099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    138  f099							;;  Calculations and tasks performed in the pre-VBlank
    139  f099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    140  f099		       a5 80		      lda	JetXPos
    141  f09b		       a0 00		      ldy	#0
    142  f09d		       20 75 f2 	      jsr	SetObjectXPos	; set player0 horizontal position
    143  f0a0
    144  f0a0		       a5 82		      lda	BomberXPos
    145  f0a2		       a0 01		      ldy	#1
    146  f0a4		       20 75 f2 	      jsr	SetObjectXPos	; set player1 horizontal position
    147  f0a7
    148  f0a7		       a5 84		      lda	MissileXPos
    149  f0a9		       a0 02		      ldy	#2
    150  f0ab		       20 75 f2 	      jsr	SetObjectXPos	; set missile horizontal position
    151  f0ae
    152  f0ae		       20 b2 f2 	      jsr	CalculateDigitOffset	; calculate the scoreboard digit lookup table offset  
    153  f0b1
    154  f0b1		       85 02		      sta	WSYNC
    155  f0b3		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
    156  f0b5
    157  f0b5		       a9 00		      lda	#0
    158  f0b7		       85 01		      sta	VBLANK	; turn off VBLANK			
    159  f0b9
    160  f0b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    161  f0b9							;;  Display the scoreboard lines
    162  f0b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    163  f0b9		       a9 00		      lda	#0
    164  f0bb		       85 09		      sta	COLUBK	; reset TIA registers before displaying the score
    165  f0bd		       85 0d		      sta	PF0
    166  f0bf		       85 0e		      sta	PF1
    167  f0c1		       85 0f		      sta	PF2
    168  f0c3		       85 1b		      sta	GRP0
    169  f0c5		       85 1c		      sta	GRP1
    170  f0c7		       85 0a		      sta	CTRLPF	; disable playfield reflection
    171  f0c9
    172  f0c9		       a9 1e		      lda	#$1E	;
    173  f0cb		       85 08		      sta	COLUPF	; set the scoreboard playfield color with yellow
    174  f0cd
    175  f0cd		       a2 05		      ldx	#DIGITS_HEIGHT	; start X counter with 5 (height of digits)
    176  f0cf
    177  f0cf				   .ScoreDigitLoop
    178  f0cf		       a4 8b		      ldy	TensDigitOffset	; get the tens digit offset for the Score
    179  f0d1		       b9 d3 f2 	      lda	Digits,Y	; load the bit pattern from lookup table
    180  f0d4		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    181  f0d6		       85 97		      sta	ScoreSprite	; save the score tens digit pattern in a variable
    182  f0d8		       a4 89		      ldy	OnesDigitOffset	; get the ones digit offset for the Score
    183  f0da		       b9 d3 f2 	      lda	Digits,Y	; load the digit bit pattern from lookup table
    184  f0dd		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    185  f0df		       05 97		      ora	ScoreSprite	; merge it with the saved tens digit sprite
    186  f0e1		       85 97		      sta	ScoreSprite	; and save it	 
    187  f0e3		       85 02		      sta	WSYNC	; wait for the end of scanline
    188  f0e5		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    189  f0e7
    190  f0e7		       a4 8c		      ldy	TensDigitOffset+1	; get the left digit offset for the Timer
    191  f0e9		       b9 d3 f2 	      lda	Digits,Y	; load the digit pattern from lookup table
    192  f0ec		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    193  f0ee		       85 98		      sta	TimerSprite	; save the timer tens digit pattern in a variable
    194  f0f0
    195  f0f0		       a4 8a		      ldy	OnesDigitOffset+1	; get the ones digit offset for the Timer
    196  f0f2		       b9 d3 f2 	      lda	Digits,Y	; load digit pattern from the lookup table
    197  f0f5		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    198  f0f7		       05 98		      ora	TimerSprite	; merge with the saved tens digit graphics
    199  f0f9		       85 98		      sta	TimerSprite	; and save it
    200  f0fb
    201  f0fb							; waste some cycles
    202  f0fb		       20 d2 f2 	      jsr	Sleep12Cycles	; wastes some cycles	      
    203  f0fe
    204  f0fe		       85 0e		      sta	PF1	; update the playfield for Timer display
    205  f100
    206  f100		       a4 97		      ldy	ScoreSprite	; preload for the next scanline
    207  f102		       85 02		      sta	WSYNC	; wait for the next scanline
    208  f104
    209  f104		       84 0e		      sty	PF1	; update playfield for the score display
    210  f106		       e6 8b		      inc	TensDigitOffset
    211  f108		       e6 8c		      inc	TensDigitOffset+1
    212  f10a		       e6 89		      inc	OnesDigitOffset
    213  f10c		       e6 8a		      inc	OnesDigitOffset+1	; increment all digits for the next line of data
    214  f10e
    215  f10e		       20 d2 f2 	      jsr	Sleep12Cycles	; wastes some cycles
    216  f111
    217  f111		       ca		      dex		; X--
    218  f112		       85 0e		      sta	PF1
    219  f114		       d0 b9		      bne	.ScoreDigitLoop	; if dex != 0, then branch to ScoreDigitLoop
    220  f116
    221  f116		       85 02		      sta	WSYNC
    222  f118		       a9 00		      lda	#0
    223  f11a		       85 0d		      sta	PF0
    224  f11c		       85 0e		      sta	PF1
    225  f11e		       85 0f		      sta	PF2
    226  f120		       85 02		      sta	WSYNC
    227  f122		       85 02		      sta	WSYNC
    228  f124		       85 02		      sta	WSYNC
    229  f126							; REPEAT 20
    230  f126							;     sta WSYNC	    ; display 20 scanlines where the scoreboard goes
    231  f126							; REPEND    
    232  f126
    233  f126							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    234  f126							;;  Display the 96 visible scanlines of our main game (2-line kernel)
    235  f126							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    236  f126				   GameVisibleLine
    237  f126		       a5 99		      lda	TerrainColor
    238  f128		       85 08		      sta	COLUPF	; set the terrain background color
    239  f12a
    240  f12a		       a5 9a		      lda	RiverColor
    241  f12c		       85 09		      sta	COLUBK	; set the river background color
    242  f12e
    243  f12e		       a9 01		      lda	#%00000001
    244  f130		       85 0a		      sta	CTRLPF	; enable playfield reflection
    245  f132		       a9 f0		      lda	#$F0
    246  f134		       85 0d		      sta	PF0	; setting PF0 bit pattern
    247  f136		       a9 fc		      lda	#$FC
    248  f138		       85 0e		      sta	PF1	; setting PF1 bit paattern
    249  f13a		       a9 00		      lda	#0
    250  f13c		       85 0f		      sta	PF2	; setting PF2 bit paattern
    251  f13e
    252  f13e		       a2 55		      ldx	#85	; X counts the number of remaining scanlines
    253  f140				   .GameLineLoop
      0  f140					      DRAW_MISSILE		; macro to check if we should draw the missile
      1  f140
      2  f140		       a9 00		      lda	#%00000000
      3  f142		       e4 85		      cpx	MissileYPos
      4  f144		       d0 04		      bne	.SkipMissileDraw
      5  f146				   .DrawMissile
      6  f146		       a9 02		      lda	#%00000010
      7  f148		       e6 85		      inc	MissileYPos
      8  f14a				   .SkipMissileDraw
      9  f14a		       85 1d		      sta	ENAM0
    255  f14c
    256  f14c				   .AreWeInsidePlayerSprite
    257  f14c		       8a		      txa		; transfer X to A
    258  f14d		       38		      sec		; make sure the carry flag is set before subtraction 
    259  f14e		       e5 81		      sbc	JetYPos	; subtract sprite Y-coordinate
    260  f150		       c5 09		      cmp	P0_HEIGHT	; are we inside the sprite height bounds?
    261  f152		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call the draw routine
    262  f154		       a9 00		      lda	#0	; else, set lookup index to zero
    263  f156				   .DrawSpriteP0
    264  f156		       18		      clc		; clear carry flag before addition
    265  f157		       65 95		      adc	P0AnimOffset	; jump to the correct sprite frame address in memory
    266  f159		       a8		      tay		; load Y so we can work with the pointer
    267  f15a		       b1 8d		      lda	(P0SpritePtr),Y	; load player0 bitmap data from lookup table
    268  f15c		       85 02		      sta	WSYNC	; wait for scanline
    269  f15e		       85 1b		      sta	GRP0	; set graphics for player0
    270  f160		       b1 8f		      lda	(P0ColorPtr),Y	; load player color from lookup table
    271  f162		       85 06		      sta	COLUP0	; set graphics of player0
    272  f164
    273  f164				   .AreWeInsideBomberSprite
    274  f164		       8a		      txa		; transfer X to A
    275  f165		       38		      sec		; make sure the carry flag is set before subtraction 
    276  f166		       e5 83		      sbc	BomberYPos	; subtract sprite Y-coordinate
    277  f168		       c5 09		      cmp	P1_HEIGHT	; are we inside the sprite height bounds?
    278  f16a		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call the draw routine
    279  f16c		       a9 00		      lda	#0	; else, set lookup index to zero
    280  f16e				   .DrawSpriteP1
    281  f16e		       a8		      tay		; load Y so we can work with the pointer
    282  f16f		       a9 05		      lda	#%00000101
    283  f171		       85 05		      sta	NUSIZ1
    284  f173		       b1 91		      lda	(P1SpritePtr),Y	; load player0 bitmap data from lookup table
    285  f175		       85 02		      sta	WSYNC	; wait for scanline
    286  f177		       85 1c		      sta	GRP1	; set graphics for player0
    287  f179		       b1 93		      lda	(P1ColorPtr),Y	; load player color from lookup table
    288  f17b		       85 07		      sta	COLUP1	; set graphics of player0
    289  f17d
    290  f17d		       ca		      dex		; X--
    291  f17e		       d0 c0		      bne	.GameLineLoop	; repeat next main game scanline until finished
    292  f180
    293  f180		       a9 00		      lda	#0
    294  f182		       85 95		      sta	P0AnimOffset	; reset player animation frame to zero each frame
    295  f184		       85 02		      sta	WSYNC	; wait for a scanline
    296  f186
    297  f186							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    298  f186							;;  Display Overscan 
    299  f186							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    300  f186		       a9 02		      lda	#2
    301  f188		       85 01		      sta	VBLANK	; turn VBLANK on again
    302  f18a					      REPEAT	30
    303  f18a		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f18a					      REPEND
    303  f18c		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f18c					      REPEND
    303  f18e		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f18e					      REPEND
    303  f190		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f190					      REPEND
    303  f192		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f192					      REPEND
    303  f194		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f194					      REPEND
    303  f196		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f196					      REPEND
    303  f198		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f198					      REPEND
    303  f19a		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f19a					      REPEND
    303  f19c		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f19c					      REPEND
    303  f19e		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f19e					      REPEND
    303  f1a0		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1a0					      REPEND
    303  f1a2		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1a2					      REPEND
    303  f1a4		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1a4					      REPEND
    303  f1a6		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1a6					      REPEND
    303  f1a8		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1a8					      REPEND
    303  f1aa		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1aa					      REPEND
    303  f1ac		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1ac					      REPEND
    303  f1ae		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1ae					      REPEND
    303  f1b0		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1b0					      REPEND
    303  f1b2		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1b2					      REPEND
    303  f1b4		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1b4					      REPEND
    303  f1b6		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1b6					      REPEND
    303  f1b8		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1b8					      REPEND
    303  f1ba		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1ba					      REPEND
    303  f1bc		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1bc					      REPEND
    303  f1be		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1be					      REPEND
    303  f1c0		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1c0					      REPEND
    303  f1c2		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    302  f1c2					      REPEND
    303  f1c4		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    304  f1c6					      REPEND
    305  f1c6		       a9 00		      lda	#0
    306  f1c8		       85 01		      sta	VBLANK	; turn off VBLANK
    307  f1ca
    308  f1ca							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    309  f1ca							;;  Process joystick input for player0
    310  f1ca							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    311  f1ca				   CheckP0Up
    312  f1ca		       a9 10		      lda	#%00010000	; player0 joystick up
    313  f1cc		       2c 80 02 	      bit	SWCHA
    314  f1cf		       d0 0c		      bne	CheckP0Down	; if bit pattern doesnt match, bypass Up block
    315  f1d1
    316  f1d1		       a9 46		      lda	#70
    317  f1d3		       c5 81		      cmp	JetYPos
    318  f1d5		       f0 06		      beq	CheckP0Down
    319  f1d7
    320  f1d7				   .P0UpPressed
    321  f1d7		       e6 81		      inc	JetYPos
    322  f1d9		       a9 00		      lda	#0
    323  f1db		       85 95		      sta	P0AnimOffset
    324  f1dd
    325  f1dd				   CheckP0Down
    326  f1dd		       a9 20		      lda	#%00100000	; player0 joystick down
    327  f1df		       2c 80 02 	      bit	SWCHA
    328  f1e2		       d0 0c		      bne	CheckP0Left	; if bit pattern doesnt match, bypass Down block
    329  f1e4		       a9 05		      lda	#5
    330  f1e6		       c5 81		      cmp	JetYPos
    331  f1e8		       f0 06		      beq	CheckP0Left
    332  f1ea
    333  f1ea				   .P0DownPressed
    334  f1ea		       c6 81		      dec	JetYPos
    335  f1ec		       a9 00		      lda	#0
    336  f1ee		       85 95		      sta	P0AnimOffset
    337  f1f0
    338  f1f0				   CheckP0Left
    339  f1f0		       a9 40		      lda	#%01000000	; player0 joystick left
    340  f1f2		       2c 80 02 	      bit	SWCHA
    341  f1f5		       d0 0c		      bne	CheckP0Right	; if bit pattern doesnt match, bypass Left block
    342  f1f7
    343  f1f7		       a9 23		      lda	#35
    344  f1f9		       c5 80		      cmp	JetXPos
    345  f1fb		       f0 06		      beq	CheckP0Right
    346  f1fd
    347  f1fd				   .P0LeftPressed
    348  f1fd		       c6 80		      dec	JetXPos
    349  f1ff		       a5 09		      lda	P0_HEIGHT	; 9
    350  f201		       85 95		      sta	P0AnimOffset	; set animation offset 
    351  f203
    352  f203				   CheckP0Right
    353  f203		       a9 80		      lda	#%10000000	; player0 joystick right
    354  f205		       2c 80 02 	      bit	SWCHA
    355  f208		       d0 0c		      bne	CheckButtonPressed	; if bit pattern doesnt match, bypass Right block
    356  f20a		       a9 64		      lda	#100
    357  f20c		       c5 80		      cmp	JetXPos
    358  f20e		       f0 06		      beq	CheckButtonPressed
    359  f210				   .P0RightPressed
    360  f210		       e6 80		      inc	JetXPos
    361  f212		       a5 09		      lda	P0_HEIGHT	; 9
    362  f214		       85 95		      sta	P0AnimOffset	; set animation offset 
    363  f216
    364  f216				   CheckButtonPressed
    365  f216		       a9 80		      lda	#%10000000	; if button is pressed
    366  f218		       24 0c		      bit	INPT4
    367  f21a		       d0 0e		      bne	EndInputCheck
    368  f21c				   .ButtonPressed
    369  f21c		       a5 80		      lda	JetXPos
    370  f21e		       18		      clc
    371  f21f		       69 05		      adc	#5
    372  f221		       85 84		      sta	MissileXPos	; set the missile X position equal to the player 0
    373  f223		       a5 81		      lda	JetYPos
    374  f225		       18		      clc
    375  f226		       69 08		      adc	#8
    376  f228		       85 85		      sta	MissileYPos	; set the missile Y position equal to the player 0
    377  f22a				   EndInputCheck		; fallback when no input was performed
    378  f22a
    379  f22a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    380  f22a							;;  Calculations to update position for next frame
    381  f22a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    382  f22a				   UpdateBomberPosition
    383  f22a		       a5 83		      lda	BomberYPos
    384  f22c		       18		      clc
    385  f22d		       c9 00		      cmp	#0	; compare bomber y-position with 0
    386  f22f		       30 05		      bmi	.ResetBomberPosition	; if it is < 0, then reset y-position to the top
    387  f231		       c6 83		      dec	BomberYPos	; else, decrement enemy y-position for next frame 
    388  f233		       4c 42 f2 	      jmp	EndPositionUpdate
    389  f236				   .ResetBomberPosition
    390  f236		       20 94 f2 	      jsr	GetRandomBomberPos	; call subroutine for random x-position
    391  f239
    392  f239				   .SetTimerValues
    393  f239		       f8		      sed		; set BCD mode for Score and timer values
    394  f23a		       a5 87		      lda	Timer
    395  f23c		       18		      clc
    396  f23d		       69 01		      adc	#1
    397  f23f		       85 87		      sta	Timer	; add 1 to the Timer (BCD does not like INC operation)
    398  f241		       d8		      cld		; disable BCD after updating Score and Timer
    399  f242
    400  f242				   EndPositionUpdate		; fallback for the position update code
    401  f242
    402  f242							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    403  f242							;;  Check for object collision 
    404  f242							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    405  f242				   CheckCollisionP0P1
    406  f242		       a9 80		      lda	#%10000000	; CXPPMM bit 7 detects P0 and P1 collision
    407  f244		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    408  f246		       d0 06		      bne	.P0P1Collided	; if collision P0 and P1 happened, game over
    409  f248		       20 6c f2 	      jsr	SetTerrainRiverColor	; else, set playfield color to green/blue
    410  f24b		       4c 51 f2 	      jmp	CheckCollisionM0P1	; else, skip to next possible collision
    411  f24e				   .P0P1Collided
    412  f24e		       20 89 f2 	      jsr	GameOver	; call GameOver subroutine
    413  f251
    414  f251				   CheckCollisionM0P1
    415  f251		       a9 80		      lda	#%10000000	; CXM0P bit 7 detects M0 and P1 collision
    416  f253		       24 00		      bit	CXM0P	; check CXM0P bit 7 with above pattern
    417  f255		       d0 03		      bne	.M0P1Collided	; collision missile 0 and player 1 happened
    418  f257		       4c 67 f2 	      jmp	EndCollisionCheck
    419  f25a				   .M0P1Collided
    420  f25a		       f8		      sed
    421  f25b		       a5 86		      lda	Score
    422  f25d		       18		      clc
    423  f25e		       69 01		      adc	#1
    424  f260		       85 86		      sta	Score	; adds 1 to the Score using decimal mode
    425  f262		       d8		      cld
    426  f263		       a9 00		      lda	#0
    427  f265		       85 85		      sta	MissileYPos	; reset the missile position
    428  f267
    429  f267				   EndCollisionCheck		; fallback
    430  f267		       85 2c		      sta	CXCLR	; clear all collision flags before the next frame
    431  f269							; lda #0 
    432  f269							; cmp BomberYPos	     ; if Bomber Y is negative
    433  f269							; bne NewFrame 	     ; not 0 ? Jump to new frame
    434  f269
    435  f269							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    436  f269							;;  Loop back to start a brand new frame 
    437  f269							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    438  f269							;NewFrame:   
    439  f269		       4c 47 f0 	      jmp	StartFrame	; continue to display the next frame
    440  f26c
    441  f26c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    442  f26c							;;  Set the colors for the terrain and river to green & blue
    443  f26c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    444  f26c				   SetTerrainRiverColor subroutine
    445  f26c		       a9 c2		      lda	#$C2
    446  f26e		       85 99		      sta	TerrainColor	; set terrain color to green
    447  f270		       a9 84		      lda	#$84
    448  f272		       85 9a		      sta	RiverColor	; set river color to blue
    449  f274		       60		      rts
    450  f275
    451  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    452  f275							;;  Subroutine to handle object horizontal position with fine offset
    453  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    454  f275							;;  A is the target x-coordinate position in pixels of our object
    455  f275							;;  Y is the object type (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    456  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    457  f275				   SetObjectXPos subroutine
    458  f275		       85 02		      sta	WSYNC	; start a fresh new scanline
    459  f277		       38		      sec		; make sure carry-flag is set before subtraction
    460  f278				   .Div15Loop
    461  f278		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    462  f27a		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    463  f27c		       49 07		      eor	#7	; handle offset range from -8 to 7
    464  f27e		       0a		      asl
    465  f27f		       0a		      asl
    466  f280		       0a		      asl
    467  f281		       0a		      asl
    468  f282		       99 20 00 	      sta	HMP0,Y	; four shift lefts to get only the top 4 bits 
    469  f285		       99 10 00 	      sta	RESP0,Y	; store the fine offset to the correct HMxx
    470  f288		       60		      rts		; fix object position in 15-step increment
    471  f289
    472  f289							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    473  f289							;;  Game Over subroutine 
    474  f289							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    475  f289				   GameOver   subroutine
    476  f289		       a9 30		      lda	#$30
    477  f28b		       85 99		      sta	TerrainColor	; set the terrain color to red
    478  f28d		       85 9a		      sta	RiverColor	; set river color to red
    479  f28f		       a9 00		      lda	#0
    480  f291		       85 86		      sta	Score	; Score = 0
    481  f293		       60		      rts
    482  f294
    483  f294							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    484  f294							;;  Subroutine to generate a Linear-Feedback Shift Register random number 
    485  f294							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    486  f294							;;  Generate a LFSR random number
    487  f294							;;  Divide the random value by 4 to limit the size of the result to match river 
    488  f294							;;  Add 30 to compensate for the left green playfield
    489  f294							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    490  f294				   GetRandomBomberPos subroutine
    491  f294		       a5 96		      lda	Random
    492  f296		       0a		      asl
    493  f297		       45 96		      eor	Random
    494  f299		       0a		      asl
    495  f29a		       45 96		      eor	Random
    496  f29c		       0a		      asl
    497  f29d		       0a		      asl
    498  f29e		       45 96		      eor	Random
    499  f2a0		       0a		      asl
    500  f2a1		       26 96		      rol	Random
    501  f2a3
    502  f2a3		       4a		      lsr
    503  f2a4		       4a		      lsr		; divide by 4
    504  f2a5		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    505  f2a7		       a9 1e		      lda	#30
    506  f2a9		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate left PF
    507  f2ab		       85 82		      sta	BomberXPos	; and sets to the new value to the bomber x-position
    508  f2ad
    509  f2ad		       a9 60		      lda	#96
    510  f2af		       85 83		      sta	BomberYPos	; set the y-posotion to the top of the screen
    511  f2b1		       60		      rts
    512  f2b2
    513  f2b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    514  f2b2							;;  Subroutine to handle scoreboard digits to be displayed on the screen
    515  f2b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    516  f2b2							;; Convert the high and low nibbles of the variable Score and Timer
    517  f2b2							;; into the offsets of digits lookup table so the values can be displayed.
    518  f2b2							;; Each digit has a height of 5 bytes in the lookup table.
    519  f2b2							;;
    520  f2b2							;; For the low nibble we need to multiply by 5
    521  f2b2							;;   - we can use left shifts to perform multiplication by 2
    522  f2b2							;;   - for any number N, the value of [N*5 = (N*2*2)+N]
    523  f2b2							;; For the upper nibble, since its already times 16, we need to divide it 
    524  f2b2							;; and then multiply by 5:
    525  f2b2							;;   - we can use right shifts to perform division by 2
    526  f2b2							;;   - for any number N, the value of (N/16)*5=(N/2/2)+(N/2/2/2/2)  
    527  f2b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    528  f2b2
    529  f2b2				   CalculateDigitOffset subroutine
    530  f2b2		       a2 01		      ldx	#1	; X register is the loop counter
    531  f2b4				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    532  f2b4
    533  f2b4		       b5 86		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    534  f2b6		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111  
    535  f2b8		       85 88		      sta	Temp	; save the value of A into Temp
    536  f2ba		       0a		      asl		; shift left (it is now N*2)
    537  f2bb		       0a		      asl		; shift left (it is now N*4)
    538  f2bc		       65 88		      adc	Temp	; add the value saved in Temp (+N)
    539  f2be		       95 89		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset  
    540  f2c0
    541  f2c0		       b5 86		      lda	Score,X	; load A with Timer (X=1) or Score(X=0)
    542  f2c2		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    543  f2c4		       4a		      lsr		; shift right (it is now N/2)
    544  f2c5		       4a		      lsr		; shift right (it is now N/4)
    545  f2c6		       85 88		      sta	Temp	; save the vale of A into Temp
    546  f2c8		       4a		      lsr		; shift right (it is now N/8)
    547  f2c9		       4a		      lsr		; shift right (it is now N/16)
    548  f2ca		       65 88		      adc	Temp	; add the value saved in Temp (N/16 + N/4)
    549  f2cc		       95 8b		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    550  f2ce
    551  f2ce		       ca		      dex		; X--
    552  f2cf		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    553  f2d1
    554  f2d1		       60		      rts
    555  f2d2
    556  f2d2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    557  f2d2							;;  Subroutine to waste 12 cycles
    558  f2d2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    559  f2d2							;; jsr takes 6 cycles
    560  f2d2							;; rts takes 6 cycles
    561  f2d2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    562  f2d2				   Sleep12Cycles subroutine
    563  f2d2		       60		      rts
    564  f2d3
    565  f2d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    566  f2d3							;;  Declare ROM lookup tables
    567  f2d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    568  f2d3				   Digits
    569  f2d3		       77		      .byte.b	%01110111	; ### ###
    570  f2d4		       55		      .byte.b	%01010101	; # # # #
    571  f2d5		       55		      .byte.b	%01010101	; # # # #
    572  f2d6		       55		      .byte.b	%01010101	; # # # #
    573  f2d7		       77		      .byte.b	%01110111	; ### ###
    574  f2d8
    575  f2d8		       11		      .byte.b	%00010001	;   #	 #
    576  f2d9		       11		      .byte.b	%00010001	;   #	 #
    577  f2da		       11		      .byte.b	%00010001	;   #	 #
    578  f2db		       11		      .byte.b	%00010001	;   #	 #
    579  f2dc		       11		      .byte.b	%00010001	;   #	 #
    580  f2dd
    581  f2dd		       77		      .byte.b	%01110111	; ### ###
    582  f2de		       11		      .byte.b	%00010001	;   #	 #
    583  f2df		       77		      .byte.b	%01110111	; ### ###
    584  f2e0		       44		      .byte.b	%01000100	; #   #
    585  f2e1		       77		      .byte.b	%01110111	; ### ###
    586  f2e2
    587  f2e2		       77		      .byte.b	%01110111	; ### ###
    588  f2e3		       11		      .byte.b	%00010001	;   #	 #
    589  f2e4		       33		      .byte.b	%00110011	;  ##	##
    590  f2e5		       11		      .byte.b	%00010001	;   #	 #
    591  f2e6		       77		      .byte.b	%01110111	; ### ###
    592  f2e7
    593  f2e7		       55		      .byte.b	%01010101	; # # # #
    594  f2e8		       55		      .byte.b	%01010101	; # # # #
    595  f2e9		       77		      .byte.b	%01110111	; ### ###
    596  f2ea		       11		      .byte.b	%00010001	;   #	 #
    597  f2eb		       11		      .byte.b	%00010001	;   #	 #
    598  f2ec
    599  f2ec		       77		      .byte.b	%01110111	; ### ###
    600  f2ed		       44		      .byte.b	%01000100	; #   #
    601  f2ee		       77		      .byte.b	%01110111	; ### ###
    602  f2ef		       11		      .byte.b	%00010001	;   #	 #
    603  f2f0		       77		      .byte.b	%01110111	; ### ###
    604  f2f1
    605  f2f1		       77		      .byte.b	%01110111	; ### ###
    606  f2f2		       44		      .byte.b	%01000100	; #   #
    607  f2f3		       77		      .byte.b	%01110111	; ### ###
    608  f2f4		       55		      .byte.b	%01010101	; # # # #
    609  f2f5		       77		      .byte.b	%01110111	; ### ###
    610  f2f6
    611  f2f6		       77		      .byte.b	%01110111	; ### ###
    612  f2f7		       11		      .byte.b	%00010001	;   #	 #
    613  f2f8		       11		      .byte.b	%00010001	;   #	 #
    614  f2f9		       11		      .byte.b	%00010001	;   #	 #
    615  f2fa		       11		      .byte.b	%00010001	;   #	 #
    616  f2fb
    617  f2fb		       77		      .byte.b	%01110111	; ### ###
    618  f2fc		       55		      .byte.b	%01010101	; # # # #
    619  f2fd		       77		      .byte.b	%01110111	; ### ###
    620  f2fe		       55		      .byte.b	%01010101	; # # # #
    621  f2ff		       77		      .byte.b	%01110111	; ### ###
    622  f300
    623  f300		       77		      .byte.b	%01110111	; ### ###
    624  f301		       55		      .byte.b	%01010101	; # # # #
    625  f302		       77		      .byte.b	%01110111	; ### ###
    626  f303		       11		      .byte.b	%00010001	;   #	 #
    627  f304		       77		      .byte.b	%01110111	; ### ###
    628  f305
    629  f305		       22		      .byte.b	%00100010	;  #	#
    630  f306		       55		      .byte.b	%01010101	; # # # #
    631  f307		       77		      .byte.b	%01110111	; ### ###
    632  f308		       55		      .byte.b	%01010101	; # # # #
    633  f309		       55		      .byte.b	%01010101	; # # # #
    634  f30a
    635  f30a		       77		      .byte.b	%01110111	; ### ###
    636  f30b		       55		      .byte.b	%01010101	; # # # #
    637  f30c		       66		      .byte.b	%01100110	; ##  ##
    638  f30d		       55		      .byte.b	%01010101	; # # # #
    639  f30e		       77		      .byte.b	%01110111	; ### ###
    640  f30f
    641  f30f		       77		      .byte.b	%01110111	; ### ###
    642  f310		       44		      .byte.b	%01000100	; #   #
    643  f311		       44		      .byte.b	%01000100	; #   #
    644  f312		       44		      .byte.b	%01000100	; #   #
    645  f313		       77		      .byte.b	%01110111	; ### ###
    646  f314
    647  f314		       66		      .byte.b	%01100110	; ##  ##
    648  f315		       55		      .byte.b	%01010101	; # # # #
    649  f316		       55		      .byte.b	%01010101	; # # # #
    650  f317		       55		      .byte.b	%01010101	; # # # #
    651  f318		       66		      .byte.b	%01100110	; ##  ##
    652  f319
    653  f319		       77		      .byte.b	%01110111	; ### ###
    654  f31a		       44		      .byte.b	%01000100	; #   #
    655  f31b		       77		      .byte.b	%01110111	; ### ###
    656  f31c		       44		      .byte.b	%01000100	; #   #
    657  f31d		       77		      .byte.b	%01110111	; ### ###
    658  f31e
    659  f31e		       77		      .byte.b	%01110111	; ### ###
    660  f31f		       44		      .byte.b	%01000100	; #   #
    661  f320		       66		      .byte.b	%01100110	; ##  ##
    662  f321		       44		      .byte.b	%01000100	; #   #
    663  f322		       44		      .byte.b	%01000100	; #   #
    664  f323
    665  f323				   P0Frame0
    666  f323		       00		      .byte.b	#%00000000
    667  f324		       10		      .byte.b	#%00010000	;$0E
    668  f325		       38		      .byte.b	#%00111000	;$06
    669  f326		       10		      .byte.b	#%00010000	;$0E
    670  f327		       10		      .byte.b	#%00010000	;$0E
    671  f328		       38		      .byte.b	#%00111000	;$0E
    672  f329		       7c		      .byte.b	#%01111100	;$0E
    673  f32a		       10		      .byte.b	#%00010000	;$9A
    674  f32b		       10		      .byte.b	#%00010000	;--
    675  f32c
    676  f32c				   P0Frame1
    677  f32c		       00		      .byte.b	#%00000000
    678  f32d		       08		      .byte.b	#%00001000	;$0E
    679  f32e		       1c		      .byte.b	#%00011100	;$06
    680  f32f		       08		      .byte.b	#%00001000	;$0E
    681  f330		       08		      .byte.b	#%00001000	;$0E
    682  f331		       3e		      .byte.b	#%00111110	;$0E
    683  f332		       7f		      .byte.b	#%01111111	;$0E
    684  f333		       08		      .byte.b	#%00001000	;$9A
    685  f334		       08		      .byte.b	#%00001000	;--
    686  f335
    687  f335				   P0Frame2
    688  f335		       00		      .byte.b	#%00000000
    689  f336		       04		      .byte.b	#%00000100	;$0E
    690  f337		       0e		      .byte.b	#%00001110	;$06
    691  f338		       04		      .byte.b	#%00000100	;$0E
    692  f339		       04		      .byte.b	#%00000100	;$0E
    693  f33a		       0e		      .byte.b	#%00001110	;$0E
    694  f33b		       1f		      .byte.b	#%00011111	;$0E
    695  f33c		       04		      .byte.b	#%00000100	;$9A
    696  f33d		       04		      .byte.b	#%00000100	;--
    697  f33e
    698  f33e				   P1Frame0
    699  f33e		       00		      .byte.b	#%00000000	;$00
    700  f33f		       08		      .byte.b	#%00001000	;$40
    701  f340		       2a		      .byte.b	#%00101010	;$AE
    702  f341		       7f		      .byte.b	#%01111111	;$44
    703  f342		       1c		      .byte.b	#%00011100	;$44
    704  f343		       08		      .byte.b	#%00001000	;$44
    705  f344		       08		      .byte.b	#%00001000	;$44
    706  f345		       1c		      .byte.b	#%00011100	;$40
    707  f346		       08		      .byte.b	#%00001000	;$40
    708  f347
    709  f347							;---Color Data from PlayerPal 2600---
    710  f347
    711  f347				   P0ColorFrame0
    712  f347		       00		      .byte.b	#$00
    713  f348		       0e		      .byte.b	#$0E	;
    714  f349		       06		      .byte.b	#$06	;
    715  f34a		       0e		      .byte.b	#$0E	;
    716  f34b		       0e		      .byte.b	#$0E	;
    717  f34c		       0e		      .byte.b	#$0E	;
    718  f34d		       0e		      .byte.b	#$0E	;
    719  f34e		       9a		      .byte.b	#$9A	;
    720  f34f		       0e		      .byte.b	#$0E	;
    721  f350
    722  f350				   P0ColorFrame1
    723  f350		       00		      .byte.b	#$00
    724  f351		       0e		      .byte.b	#$0E	;
    725  f352		       06		      .byte.b	#$06	;
    726  f353		       0e		      .byte.b	#$0E	;
    727  f354		       0e		      .byte.b	#$0E	;
    728  f355		       0e		      .byte.b	#$0E	;
    729  f356		       0e		      .byte.b	#$0E	;
    730  f357		       9a		      .byte.b	#$9A	;
    731  f358		       0e		      .byte.b	#$0E	;
    732  f359
    733  f359				   P0ColorFrame2
    734  f359		       00		      .byte.b	#$00
    735  f35a		       0e		      .byte.b	#$0E	;
    736  f35b		       06		      .byte.b	#$06	;
    737  f35c		       0e		      .byte.b	#$0E	;
    738  f35d		       0e		      .byte.b	#$0E	;
    739  f35e		       0e		      .byte.b	#$0E	;
    740  f35f		       0e		      .byte.b	#$0E	;
    741  f360		       9a		      .byte.b	#$9A	;
    742  f361		       0e		      .byte.b	#$0E	;
    743  f362
    744  f362				   P1ColorFrame0
    745  f362		       00		      .byte.b	#$00
    746  f363		       40		      .byte.b	#$40
    747  f364		       ae		      .byte.b	#$AE	;
    748  f365		       44		      .byte.b	#$44	;
    749  f366		       44		      .byte.b	#$44	;
    750  f367		       44		      .byte.b	#$44	;
    751  f368		       44		      .byte.b	#$44	;
    752  f369		       40		      .byte.b	#$40	;
    753  f36a		       40		      .byte.b	#$40	;
    754  f36b		       0e		      .byte.b	#$0E
    755  f36c
    756  f36c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    757  f36c							;;  Complete ROM size with exactly 4KB
    758  f36c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    759  fffc					      org	$FFFC	; move to position $FFFC
    760  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    761  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
