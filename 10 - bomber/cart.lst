------- FILE bomber.asm LEVEL 1 PASS 2
      1  10000 ????						; Final Project code stub - paused in lecture 55
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      6  10000 ????						;;  Include required files VCS register memory mapping and macros
      7  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  10000 ????
------- FILE ../UTILS/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"../UTILS/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01 	     Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;	      - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;		it is safe to leave it undefined, and the base address will
     38  10000 ????						;		be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0 22/MAR/2003   Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000
     76 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     77 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     78 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     79 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     80 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     81 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     82 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     83 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     84 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     85 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     86 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     87 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     88 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     89 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     90 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     91 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     92 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     93 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     94 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     95 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     96 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     97 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     98 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     99 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    100 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    101 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    102 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    103 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    104 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    105 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    106 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    107 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    108 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    109 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    110 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    111 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    112 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    113 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    114 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    115 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    116 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    117 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    118 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    119 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    120 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    121 U002d
    122 U002d							;-------------------------------------------------------------------------------
    123 U000e ????				      SEG.U	TIA_REGISTERS_READ
    124 U0000					      ORG	TIA_BASE_READ_ADDRESS
    125 U0000							;		       bit 7   bit 6
    126 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    127 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    128 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    129 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    130 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    131 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    132 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    133 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    134 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    135 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    136 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    137 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    138 U000c		       00	   INPT4      ds	1	; $0C	 x000 0000	 Read Input (Trigger) 0
    139 U000d		       00	   INPT5      ds	1	; $0D	 x000 0000	 Read Input (Trigger) 1
    140 U000e							;-------------------------------------------------------------------------------
    141 U0298 ????				      SEG.U	RIOT
    142 U0280					      ORG	$280
    143 U0280
    144 U0280							; RIOT MEMORY MAP
    145 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    146 U0281							;     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    147 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    148 U0282		       00	   SWCHB      ds	1	; $282    Port B data (console switches)
    149 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    150 U0284		       00	   INTIM      ds	1	; $284    Timer output
    151 U0285		       00	   TIMINT     ds	1	; $285
    152 U0286							; Unused/undefined registers ($285-$294)
    153 U0286		       00		      ds	1	; $286
    154 U0287		       00		      ds	1	; $287
    155 U0288		       00		      ds	1	; $288
    156 U0289		       00		      ds	1	; $289
    157 U028a		       00		      ds	1	; $28A
    158 U028b		       00		      ds	1	; $28B
    159 U028c		       00		      ds	1	; $28C
    160 U028d		       00		      ds	1	; $28D
    161 U028e		       00		      ds	1	; $28E
    162 U028f		       00		      ds	1	; $28F
    163 U0290		       00		      ds	1	; $290
    164 U0291		       00		      ds	1	; $291
    165 U0292		       00		      ds	1	; $292
    166 U0293		       00		      ds	1	; $293
    167 U0294		       00	   TIM1T      ds	1	; $294    set 1 clock interval
    168 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    169 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    170 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    171 U0298							;-------------------------------------------------------------------------------
    172 U0298							; The following required for back-compatibility with code which does not use
    173 U0298							; segments.
    174  0000 ????				      SEG
    175  0000 ????						; EOF
------- FILE bomber.asm
------- FILE ../UTILS/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"../UTILS/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0 22/MAR/2003   Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomber.asm
     11  0000 ????
     12  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     13  0000 ????						;;  Declare the variable starting from memory adderss $80
     14  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     15  0000 ????
     16 U008e ????				      seg.u	Variables
     17 U0080					      org	$80
     18 U0080
     19 U0080		       00	   JetXPos    byte.b		; player0 x-position
     20 U0081		       00	   JetYPos    byte.b		; player0 y-position
     21 U0082		       00	   BomberXPos byte.b		; player1 x-position (enemy x)
     22 U0083		       00	   BomberYPos byte.b		; player1 y-position (enemy y)
     23 U0084		       00 00	   P0SpritePtr word.w		; pointer to player0 sprite lookup table
     24 U0086		       00 00	   P0ColorPtr word.w		; pointer to player0 color lookup table
     25 U0088		       00 00	   P1SpritePtr word.w		; pointer to enemy sprite lookup table
     26 U008a		       00 00	   P1ColorPtr word.w		; pointer to enemy color lookup table
     27 U008c		       00	   P0AnimOffset byte.b		; player0 sprite frame offset for "animation"
     28 U008d		       00	   Random     byte.b		; random number generated to set enemy position
     29 U008e
     30 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     31 U008e							;;  Define constants  
     32 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33 U008e		       00 09	   P0_HEIGHT  =	9	; player0 sprite height (# rows in lookup table)
     34 U008e		       00 09	   P1_HEIGHT  =	9	; player1 sprite height (# rows in lookup table)
     35 U008e
     36 U008e							;; below code can be possible as an alternative
     37 U008e							;; P0_HEIGHT = . - P0Frame0
     38 U008e
     39 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40 U008e							;;  Start our ROM code at memory address $F000  
     41 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42 U008e
     43  10000 ????				       seg	Code
     44  f000					      org	$F000
     45  f000
     46  f000				   Reset
      0  f000					      CLEAN_START		; call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     48  f00b
     49  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     50  f00b							;;  Initialize RAM variables and TIA registers 
     51  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     52  f00b		       a9 0a		      lda	#10
     53  f00d		       85 81		      sta	JetYPos	; JetYPos = 10
     54  f00f		       a9 44		      lda	#68
     55  f011		       85 80		      sta	JetXPos	; JetXPos = 0
     56  f013		       a9 53		      lda	#83
     57  f015		       85 83		      sta	BomberYPos
     58  f017		       a9 3e		      lda	#62
     59  f019		       85 82		      sta	BomberXPos
     60  f01b		       a9 d4		      lda	#%11010100
     61  f01d		       85 8d		      sta	Random	; Random = $D4
     62  f01f
     63  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     64  f01f							;;  Initialize the pointers to the correct lookup table addresses 
     65  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     66  f01f		       a9 1b		      lda	#<P0Frame1
     67  f021		       85 84		      sta	P0SpritePtr	; lo-byte pointer for player sprite lookup table
     68  f023		       a9 f2		      lda	#>P0Frame1
     69  f025		       85 85		      sta	P0SpritePtr+1	; hi-byte pointer for player sprite lookup table
     70  f027
     71  f027		       a9 3f		      lda	#<P0ColorFrame1
     72  f029		       85 86		      sta	P0ColorPtr
     73  f02b		       a9 f2		      lda	#>P0ColorFrame1
     74  f02d		       85 87		      sta	P0ColorPtr+1
     75  f02f
     76  f02f		       a9 2d		      lda	#<P1Frame0
     77  f031		       85 88		      sta	P1SpritePtr	; lo-byte pointer for enemy sprite lookup table
     78  f033		       a9 f2		      lda	#>P1Frame0
     79  f035		       85 89		      sta	P1SpritePtr+1	; hi-byte pointer for enemy sprite lookup table
     80  f037
     81  f037		       a9 51		      lda	#<P1ColorFrame0
     82  f039		       85 8a		      sta	P1ColorPtr
     83  f03b		       a9 f2		      lda	#>P1ColorFrame0
     84  f03d		       85 8b		      sta	P1ColorPtr+1
     85  f03f
     86  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     87  f03f							;;  Start the main display loop and frame rendering 
     88  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     89  f03f				   StartFrame
     90  f03f
     91  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     92  f03f							;;  Calculations and tasks performed in the pre-VBlank
     93  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     94  f03f		       a5 80		      lda	JetXPos
     95  f041		       a0 00		      ldy	#0
     96  f043		       20 db f1 	      jsr	SetObjectXPos	; set player0 horizontal position
     97  f046
     98  f046		       a5 82		      lda	BomberXPos
     99  f048		       a0 01		      ldy	#1
    100  f04a		       20 db f1 	      jsr	SetObjectXPos	; set player1 horizontal position
    101  f04d
    102  f04d		       85 02		      sta	WSYNC
    103  f04f		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
    104  f051
    105  f051							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    106  f051							;;  Display VSYNC and VBLANK 
    107  f051							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    108  f051		       a9 02		      lda	#2
    109  f053		       85 01		      sta	VBLANK	; turn on VBLANK (0010)
    110  f055		       85 00		      sta	VSYNC	; turn on VSYNC
    111  f057					      REPEAT	3
    112  f057		       85 02		      sta	WSYNC	; display 3 recommended liens of VSYNC    
    111  f057					      REPEND
    112  f059		       85 02		      sta	WSYNC	; display 3 recommended liens of VSYNC    
    111  f059					      REPEND
    112  f05b		       85 02		      sta	WSYNC	; display 3 recommended liens of VSYNC    
    113  f05d					      REPEND
    114  f05d		       a9 00		      lda	#0
    115  f05f		       85 00		      sta	VSYNC	; turn off VSYNC 
    116  f061					      REPEAT	37
    117  f061		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f061					      REPEND
    117  f063		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f063					      REPEND
    117  f065		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f065					      REPEND
    117  f067		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f067					      REPEND
    117  f069		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f069					      REPEND
    117  f06b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f06b					      REPEND
    117  f06d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f06d					      REPEND
    117  f06f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f06f					      REPEND
    117  f071		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f071					      REPEND
    117  f073		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f073					      REPEND
    117  f075		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f075					      REPEND
    117  f077		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f077					      REPEND
    117  f079		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f079					      REPEND
    117  f07b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f07b					      REPEND
    117  f07d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f07d					      REPEND
    117  f07f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f07f					      REPEND
    117  f081		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f081					      REPEND
    117  f083		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f083					      REPEND
    117  f085		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f085					      REPEND
    117  f087		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f087					      REPEND
    117  f089		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f089					      REPEND
    117  f08b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f08b					      REPEND
    117  f08d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f08d					      REPEND
    117  f08f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f08f					      REPEND
    117  f091		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f091					      REPEND
    117  f093		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f093					      REPEND
    117  f095		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f095					      REPEND
    117  f097		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f097					      REPEND
    117  f099		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f099					      REPEND
    117  f09b		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f09b					      REPEND
    117  f09d		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f09d					      REPEND
    117  f09f		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f09f					      REPEND
    117  f0a1		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f0a1					      REPEND
    117  f0a3		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f0a3					      REPEND
    117  f0a5		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f0a5					      REPEND
    117  f0a7		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    116  f0a7					      REPEND
    117  f0a9		       85 02		      sta	WSYNC	; display the 37 recommended lines of VBLANK
    118  f0ab					      REPEND
    119  f0ab		       85 01		      sta	VBLANK	; turn off VBLANK			
    120  f0ad
    121  f0ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    122  f0ad							;;  Display the scoreboard lines
    123  f0ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    124  f0ad		       a9 00		      lda	#0	; clear TIA registers for each new frame 
    125  f0af		       85 0d		      sta	PF0
    126  f0b1		       85 0e		      sta	PF1
    127  f0b3		       85 0f		      sta	PF2
    128  f0b5		       85 1b		      sta	GRP0
    129  f0b7		       85 1c		      sta	GRP1
    130  f0b9		       85 08		      sta	COLUPF
    131  f0bb					      REPEAT	20
    132  f0bb		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0bb					      REPEND
    132  f0bd		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0bd					      REPEND
    132  f0bf		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0bf					      REPEND
    132  f0c1		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0c1					      REPEND
    132  f0c3		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0c3					      REPEND
    132  f0c5		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0c5					      REPEND
    132  f0c7		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0c7					      REPEND
    132  f0c9		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0c9					      REPEND
    132  f0cb		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0cb					      REPEND
    132  f0cd		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0cd					      REPEND
    132  f0cf		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0cf					      REPEND
    132  f0d1		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0d1					      REPEND
    132  f0d3		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0d3					      REPEND
    132  f0d5		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0d5					      REPEND
    132  f0d7		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0d7					      REPEND
    132  f0d9		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0d9					      REPEND
    132  f0db		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0db					      REPEND
    132  f0dd		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0dd					      REPEND
    132  f0df		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    131  f0df					      REPEND
    132  f0e1		       85 02		      sta	WSYNC	; display 20 scanlines where the scoreboard goes
    133  f0e3					      REPEND
    134  f0e3
    135  f0e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    136  f0e3							;;  Display the 96 visible scanlines of our main game (2-line kernel)
    137  f0e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    138  f0e3				   GameVisibleLine
    139  f0e3		       a9 84		      lda	#$84
    140  f0e5		       85 09		      sta	COLUBK	; set color background to blue
    141  f0e7
    142  f0e7		       a9 c2		      lda	#$C2
    143  f0e9		       85 08		      sta	COLUPF	; set playfield/grass color to green
    144  f0eb
    145  f0eb		       a9 01		      lda	#%00000001
    146  f0ed		       85 0a		      sta	CTRLPF	; enable playfield reflection
    147  f0ef
    148  f0ef		       a9 f0		      lda	#$F0
    149  f0f1		       85 0d		      sta	PF0	; setting PF0 bit pattern
    150  f0f3
    151  f0f3		       a9 fc		      lda	#$FC
    152  f0f5		       85 0e		      sta	PF1	; setting PF1 bit paattern
    153  f0f7
    154  f0f7		       a9 00		      lda	#0
    155  f0f9		       85 0f		      sta	PF2	; setting PF2 bit paattern
    156  f0fb
    157  f0fb		       a2 54		      ldx	#84	; X counts the number of remaining scanlines
    158  f0fd				   .GameLineLoop
    159  f0fd				   .AreWeInsidePlayerSprite
    160  f0fd		       8a		      txa		; transfer X to A
    161  f0fe		       38		      sec		; make sure the carry flag is set before subtraction 
    162  f0ff		       e5 81		      sbc	JetYPos	; subtract sprite Y-coordinate
    163  f101		       c5 09		      cmp	P0_HEIGHT	; are we inside the sprite height bounds?
    164  f103		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call the draw routine
    165  f105		       a9 00		      lda	#0	; else, set lookup index to zero
    166  f107				   .DrawSpriteP0
    167  f107		       18		      clc		; clear carry flag before addition
    168  f108		       65 8c		      adc	P0AnimOffset	; jump to the correct sprite frame address in memory
    169  f10a		       a8		      tay		; load Y so we can work with the pointer
    170  f10b		       b1 84		      lda	(P0SpritePtr),Y	; load player0 bitmap data from lookup table
    171  f10d		       85 02		      sta	WSYNC	; wait for scanline
    172  f10f		       85 1b		      sta	GRP0	; set graphics for player0
    173  f111		       b1 86		      lda	(P0ColorPtr),Y	; load player color from lookup table
    174  f113		       85 06		      sta	COLUP0	; set graphics of player0
    175  f115
    176  f115				   .AreWeInsideBomberSprite
    177  f115		       8a		      txa		; transfer X to A
    178  f116		       38		      sec		; make sure the carry flag is set before subtraction 
    179  f117		       e5 83		      sbc	BomberYPos	; subtract sprite Y-coordinate
    180  f119		       c5 09		      cmp	P1_HEIGHT	; are we inside the sprite height bounds?
    181  f11b		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call the draw routine
    182  f11d		       a9 00		      lda	#0	; else, set lookup index to zero
    183  f11f				   .DrawSpriteP1
    184  f11f		       a8		      tay		; load Y so we can work with the pointer
    185  f120		       a9 05		      lda	#%00000101
    186  f122		       85 05		      sta	NUSIZ1
    187  f124		       b1 88		      lda	(P1SpritePtr),Y	; load player0 bitmap data from lookup table
    188  f126		       85 02		      sta	WSYNC	; wait for scanline
    189  f128		       85 1c		      sta	GRP1	; set graphics for player0
    190  f12a		       b1 8a		      lda	(P1ColorPtr),Y	; load player color from lookup table
    191  f12c		       85 07		      sta	COLUP1	; set graphics of player0
    192  f12e
    193  f12e		       ca		      dex		; X--
    194  f12f		       d0 cc		      bne	.GameLineLoop	; repeat next main game scanline until finished
    195  f131
    196  f131		       a9 00		      lda	#0
    197  f133		       85 8c		      sta	P0AnimOffset	; reset player animation frame to zero each frame
    198  f135
    199  f135		       85 02		      sta	WSYNC	; wait for a scanline
    200  f137							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    201  f137							;;  Display Overscan 
    202  f137							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    203  f137		       a9 02		      lda	#2
    204  f139		       85 01		      sta	VBLANK	; turn VBLANK on again
    205  f13b					      REPEAT	30
    206  f13b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f13b					      REPEND
    206  f13d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f13d					      REPEND
    206  f13f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f13f					      REPEND
    206  f141		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f141					      REPEND
    206  f143		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f143					      REPEND
    206  f145		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f145					      REPEND
    206  f147		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f147					      REPEND
    206  f149		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f149					      REPEND
    206  f14b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f14b					      REPEND
    206  f14d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f14d					      REPEND
    206  f14f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f14f					      REPEND
    206  f151		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f151					      REPEND
    206  f153		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f153					      REPEND
    206  f155		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f155					      REPEND
    206  f157		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f157					      REPEND
    206  f159		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f159					      REPEND
    206  f15b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f15b					      REPEND
    206  f15d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f15d					      REPEND
    206  f15f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f15f					      REPEND
    206  f161		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f161					      REPEND
    206  f163		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f163					      REPEND
    206  f165		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f165					      REPEND
    206  f167		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f167					      REPEND
    206  f169		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f169					      REPEND
    206  f16b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f16b					      REPEND
    206  f16d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f16d					      REPEND
    206  f16f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f16f					      REPEND
    206  f171		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f171					      REPEND
    206  f173		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    205  f173					      REPEND
    206  f175		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    207  f177					      REPEND
    208  f177		       a9 00		      lda	#0
    209  f179		       85 01		      sta	VBLANK	; turn off VBLANK
    210  f17b
    211  f17b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    212  f17b							;;  Process joystick input for player0
    213  f17b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    214  f17b				   CheckP0Up
    215  f17b		       a9 10		      lda	#%00010000	; player0 joystick up
    216  f17d		       2c 80 02 	      bit	SWCHA
    217  f180		       d0 06		      bne	CheckP0Down	; if bit pattern doesnt match, bypass Up block
    218  f182		       e6 81		      inc	JetYPos
    219  f184		       a9 00		      lda	#0
    220  f186		       85 8c		      sta	P0AnimOffset
    221  f188
    222  f188				   CheckP0Down
    223  f188		       a9 20		      lda	#%00100000	; player0 joystick down
    224  f18a		       2c 80 02 	      bit	SWCHA
    225  f18d		       d0 06		      bne	CheckP0Left	; if bit pattern doesnt match, bypass Down block
    226  f18f		       c6 81		      dec	JetYPos
    227  f191		       a9 00		      lda	#0
    228  f193		       85 8c		      sta	P0AnimOffset
    229  f195
    230  f195				   CheckP0Left
    231  f195		       a9 40		      lda	#%01000000	; player0 joystick left
    232  f197		       2c 80 02 	      bit	SWCHA
    233  f19a		       d0 06		      bne	CheckP0Right	; if bit pattern doesnt match, bypass Left block
    234  f19c		       c6 80		      dec	JetXPos
    235  f19e		       a5 09		      lda	P0_HEIGHT	; 9
    236  f1a0		       85 8c		      sta	P0AnimOffset	; set animation offset 
    237  f1a2
    238  f1a2				   CheckP0Right
    239  f1a2		       a9 80		      lda	#%10000000	; player0 joystick right
    240  f1a4		       2c 80 02 	      bit	SWCHA
    241  f1a7		       d0 06		      bne	EndInputCheck	; if bit pattern doesnt match, bypass Right block
    242  f1a9		       e6 80		      inc	JetXPos
    243  f1ab		       a5 09		      lda	P0_HEIGHT	; 9
    244  f1ad		       85 8c		      sta	P0AnimOffset	; set animation offset 
    245  f1af
    246  f1af				   EndInputCheck		; fallback when no input was performed
    247  f1af
    248  f1af							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    249  f1af							;;  Calculations to update position for next frame
    250  f1af							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    251  f1af				   UpdateBomberPosition
    252  f1af		       a5 83		      lda	BomberYPos
    253  f1b1		       18		      clc
    254  f1b2		       c9 00		      cmp	#0	; compare bomber y-position with 0
    255  f1b4		       30 05		      bmi	.ResetBomberPosition	; if it is < 0, then reset y-position to the top
    256  f1b6		       c6 83		      dec	BomberYPos	; else, decrement enemy y-position for next frame 
    257  f1b8		       4c be f1 	      jmp	EndPositionUpdate
    258  f1bb				   .ResetBomberPosition
    259  f1bb		       20 f4 f1 	      jsr	GetRandomBomberPos	; call subroutine for random x-position
    260  f1be
    261  f1be				   EndPositionUpdate		; fallback for the position update code
    262  f1be
    263  f1be							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    264  f1be							;;  Check for object collision 
    265  f1be							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    266  f1be				   CheckCollisionP0P1
    267  f1be		       a9 80		      lda	#%10000000	; CXPPMM bit 7 detects P0 and P1 collision
    268  f1c0		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    269  f1c2		       d0 03		      bne	.CollisionP0P1	; if collision P0 and P1 happened, game over
    270  f1c4		       4c ca f1 	      jmp	CheckCollisionP0PF	; else, skip to next check
    271  f1c7				   .CollisionP0P1
    272  f1c7		       20 ef f1 	      jsr	GameOver	; call GameOver subroutine
    273  f1ca
    274  f1ca				   CheckCollisionP0PF
    275  f1ca		       a9 80		      lda	#%10000000	; CXP0FB bit 7 detects P0 and PF collision
    276  f1cc		       24 02		      bit	CXP0FB	; check CXP0FB bit 7 with the above pattern
    277  f1ce		       d0 03		      bne	.CollisionP0PF	; if collision P0 and P1 happened
    278  f1d0		       4c d6 f1 	      jmp	EndCollisionCheck	; else, skip to the end check
    279  f1d3
    280  f1d3				   .CollisionP0PF
    281  f1d3		       20 ef f1 	      jsr	GameOver	; call gameOver subroutine
    282  f1d6
    283  f1d6				   EndCollisionCheck		; fallback
    284  f1d6		       85 2c		      sta	CXCLR	; clear all collision flags before the next frame
    285  f1d8
    286  f1d8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    287  f1d8							;;  Loop back to start a brand new frame 
    288  f1d8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    289  f1d8		       4c 3f f0 	      jmp	StartFrame	; continue to display the next frame
    290  f1db
    291  f1db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    292  f1db							;;  Subroutine to handle object horizontal position with fine offset
    293  f1db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    294  f1db							;;  A is the target x-coordinate position in pixels of our object
    295  f1db							;;  Y is the object type (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    296  f1db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    297  f1db				   SetObjectXPos subroutine
    298  f1db		       85 02		      sta	WSYNC	; start a fresh new scanline
    299  f1dd		       38		      sec		; make sure carry-flag is set before subtraction
    300  f1de				   .Div15Loop
    301  f1de		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    302  f1e0		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    303  f1e2		       49 07		      eor	#7	; handle offset range from -8 to 7
    304  f1e4		       0a		      asl
    305  f1e5		       0a		      asl
    306  f1e6		       0a		      asl
    307  f1e7		       0a		      asl
    308  f1e8		       99 20 00 	      sta	HMP0,Y	; four shift lefts to get only the top 4 bits 
    309  f1eb		       99 10 00 	      sta	RESP0,Y	; store the fine offset to the correct HMxx
    310  f1ee		       60		      rts		; fix object position in 15-step increment
    311  f1ef
    312  f1ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    313  f1ef							;;  Game Over subroutine 
    314  f1ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    315  f1ef				   GameOver   subroutine
    316  f1ef		       a9 30		      lda	#$30
    317  f1f1		       85 09		      sta	COLUBK
    318  f1f3		       60		      rts
    319  f1f4
    320  f1f4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    321  f1f4							;;  Subroutine to generate a Linear-Feedback Shift Register random number 
    322  f1f4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    323  f1f4							;;  Generate a LFSR random number
    324  f1f4							;;  Divide the random value by 4 to limit the size of the result to match river 
    325  f1f4							;;  Add 30 to compensate for the left green playfield
    326  f1f4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    327  f1f4				   GetRandomBomberPos subroutine
    328  f1f4		       a5 8d		      lda	Random
    329  f1f6		       0a		      asl
    330  f1f7		       45 8d		      eor	Random
    331  f1f9		       0a		      asl
    332  f1fa		       45 8d		      eor	Random
    333  f1fc		       0a		      asl
    334  f1fd		       0a		      asl
    335  f1fe		       45 8d		      eor	Random
    336  f200		       0a		      asl
    337  f201		       26 8d		      rol	Random
    338  f203
    339  f203		       4a		      lsr
    340  f204		       4a		      lsr		; divide by 4
    341  f205		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    342  f207		       a9 1e		      lda	#30
    343  f209		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate left PF
    344  f20b		       85 82		      sta	BomberXPos	; and sets to the new value to the bomber x-position
    345  f20d
    346  f20d		       a9 60		      lda	#96
    347  f20f		       85 83		      sta	BomberYPos	; set the y-posotion to the top of the screen
    348  f211		       60		      rts
    349  f212
    350  f212							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    351  f212							;;  Declare ROM lookup tables
    352  f212							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    353  f212				   P0Frame0
    354  f212		       00		      .byte.b	#%00000000
    355  f213		       10		      .byte.b	#%00010000	;$0E
    356  f214		       38		      .byte.b	#%00111000	;$06
    357  f215		       10		      .byte.b	#%00010000	;$0E
    358  f216		       10		      .byte.b	#%00010000	;$0E
    359  f217		       38		      .byte.b	#%00111000	;$0E
    360  f218		       7c		      .byte.b	#%01111100	;$0E
    361  f219		       10		      .byte.b	#%00010000	;$9A
    362  f21a		       10		      .byte.b	#%00010000	;--
    363  f21b
    364  f21b				   P0Frame1
    365  f21b		       00		      .byte.b	#%00000000
    366  f21c		       08		      .byte.b	#%00001000	;$0E
    367  f21d		       1c		      .byte.b	#%00011100	;$06
    368  f21e		       08		      .byte.b	#%00001000	;$0E
    369  f21f		       08		      .byte.b	#%00001000	;$0E
    370  f220		       3e		      .byte.b	#%00111110	;$0E
    371  f221		       7f		      .byte.b	#%01111111	;$0E
    372  f222		       08		      .byte.b	#%00001000	;$9A
    373  f223		       08		      .byte.b	#%00001000	;--
    374  f224
    375  f224				   P0Frame2
    376  f224		       00		      .byte.b	#%00000000
    377  f225		       04		      .byte.b	#%00000100	;$0E
    378  f226		       0e		      .byte.b	#%00001110	;$06
    379  f227		       04		      .byte.b	#%00000100	;$0E
    380  f228		       04		      .byte.b	#%00000100	;$0E
    381  f229		       0e		      .byte.b	#%00001110	;$0E
    382  f22a		       1f		      .byte.b	#%00011111	;$0E
    383  f22b		       04		      .byte.b	#%00000100	;$9A
    384  f22c		       04		      .byte.b	#%00000100	;--
    385  f22d
    386  f22d				   P1Frame0
    387  f22d		       00		      .byte.b	#%00000000	;$00
    388  f22e		       08		      .byte.b	#%00001000	;$40
    389  f22f		       2a		      .byte.b	#%00101010	;$AE
    390  f230		       7f		      .byte.b	#%01111111	;$44
    391  f231		       1c		      .byte.b	#%00011100	;$44
    392  f232		       08		      .byte.b	#%00001000	;$44
    393  f233		       08		      .byte.b	#%00001000	;$44
    394  f234		       1c		      .byte.b	#%00011100	;$40
    395  f235		       08		      .byte.b	#%00001000	;$40
    396  f236
    397  f236
    398  f236							;---Color Data from PlayerPal 2600---
    399  f236
    400  f236				   P0ColorFrame0
    401  f236		       00		      .byte.b	#$00
    402  f237		       0e		      .byte.b	#$0E	;
    403  f238		       06		      .byte.b	#$06	;
    404  f239		       0e		      .byte.b	#$0E	;
    405  f23a		       0e		      .byte.b	#$0E	;
    406  f23b		       0e		      .byte.b	#$0E	;
    407  f23c		       0e		      .byte.b	#$0E	;
    408  f23d		       9a		      .byte.b	#$9A	;
    409  f23e		       0e		      .byte.b	#$0E	;
    410  f23f
    411  f23f				   P0ColorFrame1
    412  f23f		       00		      .byte.b	#$00
    413  f240		       0e		      .byte.b	#$0E	;
    414  f241		       06		      .byte.b	#$06	;
    415  f242		       0e		      .byte.b	#$0E	;
    416  f243		       0e		      .byte.b	#$0E	;
    417  f244		       0e		      .byte.b	#$0E	;
    418  f245		       0e		      .byte.b	#$0E	;
    419  f246		       9a		      .byte.b	#$9A	;
    420  f247		       0e		      .byte.b	#$0E	;
    421  f248
    422  f248				   P0ColorFrame2
    423  f248		       00		      .byte.b	#$00
    424  f249		       0e		      .byte.b	#$0E	;
    425  f24a		       06		      .byte.b	#$06	;
    426  f24b		       0e		      .byte.b	#$0E	;
    427  f24c		       0e		      .byte.b	#$0E	;
    428  f24d		       0e		      .byte.b	#$0E	;
    429  f24e		       0e		      .byte.b	#$0E	;
    430  f24f		       9a		      .byte.b	#$9A	;
    431  f250		       0e		      .byte.b	#$0E	;
    432  f251
    433  f251				   P1ColorFrame0
    434  f251		       00		      .byte.b	#$00
    435  f252		       40		      .byte.b	#$40
    436  f253		       ae		      .byte.b	#$AE	;
    437  f254		       44		      .byte.b	#$44	;
    438  f255		       44		      .byte.b	#$44	;
    439  f256		       44		      .byte.b	#$44	;
    440  f257		       44		      .byte.b	#$44	;
    441  f258		       40		      .byte.b	#$40	;
    442  f259		       40		      .byte.b	#$40	;
    443  f25a		       0e		      .byte.b	#$0E
    444  f25b
    445  f25b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    446  f25b							;;  Complete ROM size with exactly 4KB
    447  f25b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    448  fffc					      org	$FFFC	; move to position $FFFC
    449  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    450  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
