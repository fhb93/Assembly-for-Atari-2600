------- FILE bomber.asm LEVEL 1 PASS 2
      1  10000 ????						; Final Project code stub - paused in lecture 70
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      6  10000 ????						;;  Include required files VCS register memory mapping and macros
      7  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  10000 ????
------- FILE ../UTILS/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"../UTILS/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01 	     Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;	      - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;		it is safe to leave it undefined, and the base address will
     38  10000 ????						;		be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0 22/MAR/2003   Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000
     76 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     77 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     78 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     79 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     80 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     81 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     82 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     83 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     84 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     85 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     86 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     87 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     88 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     89 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     90 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     91 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     92 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     93 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     94 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     95 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     96 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     97 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     98 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     99 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    100 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    101 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    102 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    103 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    104 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    105 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    106 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    107 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    108 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    109 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    110 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    111 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    112 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    113 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    114 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    115 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    116 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    117 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    118 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    119 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    120 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    121 U002d
    122 U002d							;-------------------------------------------------------------------------------
    123 U000e ????				      SEG.U	TIA_REGISTERS_READ
    124 U0000					      ORG	TIA_BASE_READ_ADDRESS
    125 U0000							;		       bit 7   bit 6
    126 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    127 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    128 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    129 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    130 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    131 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    132 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    133 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    134 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    135 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    136 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    137 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    138 U000c		       00	   INPT4      ds	1	; $0C	 x000 0000	 Read Input (Trigger) 0
    139 U000d		       00	   INPT5      ds	1	; $0D	 x000 0000	 Read Input (Trigger) 1
    140 U000e							;-------------------------------------------------------------------------------
    141 U0298 ????				      SEG.U	RIOT
    142 U0280					      ORG	$280
    143 U0280
    144 U0280							; RIOT MEMORY MAP
    145 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    146 U0281							;     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    147 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    148 U0282		       00	   SWCHB      ds	1	; $282    Port B data (console switches)
    149 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    150 U0284		       00	   INTIM      ds	1	; $284    Timer output
    151 U0285		       00	   TIMINT     ds	1	; $285
    152 U0286							; Unused/undefined registers ($285-$294)
    153 U0286		       00		      ds	1	; $286
    154 U0287		       00		      ds	1	; $287
    155 U0288		       00		      ds	1	; $288
    156 U0289		       00		      ds	1	; $289
    157 U028a		       00		      ds	1	; $28A
    158 U028b		       00		      ds	1	; $28B
    159 U028c		       00		      ds	1	; $28C
    160 U028d		       00		      ds	1	; $28D
    161 U028e		       00		      ds	1	; $28E
    162 U028f		       00		      ds	1	; $28F
    163 U0290		       00		      ds	1	; $290
    164 U0291		       00		      ds	1	; $291
    165 U0292		       00		      ds	1	; $292
    166 U0293		       00		      ds	1	; $293
    167 U0294		       00	   TIM1T      ds	1	; $294    set 1 clock interval
    168 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    169 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    170 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    171 U0298							;-------------------------------------------------------------------------------
    172 U0298							; The following required for back-compatibility with code which does not use
    173 U0298							; segments.
    174  0000 ????				      SEG
    175  0000 ????						; EOF
------- FILE bomber.asm
------- FILE ../UTILS/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"../UTILS/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0 22/MAR/2003   Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomber.asm
     11  0000 ????
     12  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     13  0000 ????						;;  Declare the variable starting from memory adderss $80
     14  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     15  0000 ????
     16 U0097 ????				      seg.u	Variables
     17 U0080					      org	$80
     18 U0080
     19 U0080		       00	   JetXPos    byte.b		; player0 x-position
     20 U0081		       00	   JetYPos    byte.b		; player0 y-position
     21 U0082		       00	   BomberXPos byte.b		; player1 x-position (enemy x)
     22 U0083		       00	   BomberYPos byte.b		; player1 y-position (enemy y)
     23 U0084		       00	   Score      byte.b		; 2-digit score stored as BCD
     24 U0085		       00	   Timer      byte.b		; 2-digit timer stored as BCD
     25 U0086		       00	   Temp       byte.b		; auxiliary variable to store temp score values
     26 U0087		       00 00	   OnesDigitOffset word.w		; lookup table offset for the score 1's digit
     27 U0089		       00 00	   TensDigitOffset word.w		; lookup table offset for the score 10's digit
     28 U008b		       00 00	   P0SpritePtr word.w		; pointer to player0 sprite lookup table
     29 U008d		       00 00	   P0ColorPtr word.w		; pointer to player0 color lookup table
     30 U008f		       00 00	   P1SpritePtr word.w		; pointer to enemy sprite lookup table
     31 U0091		       00 00	   P1ColorPtr word.w		; pointer to enemy color lookup table
     32 U0093		       00	   P0AnimOffset byte.b		; player0 sprite frame offset for "animation"
     33 U0094		       00	   Random     byte.b		; random number generated to set enemy position
     34 U0095		       00	   ScoreSprite byte.b		; store the sprite bit pattern for the score
     35 U0096		       00	   TimerSprite byte.b		; store the sprite bit pattern for the timer
     36 U0097
     37 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     38 U0097							;;  Define constants  
     39 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40 U0097		       00 09	   P0_HEIGHT  =	9	; player0 sprite height (# rows in lookup table)
     41 U0097		       00 09	   P1_HEIGHT  =	9	; player1 sprite height (# rows in lookup table)
     42 U0097		       00 05	   DIGITS_HEIGHT =	5	; scoreboard digit height (#rows in lookup table)
     43 U0097
     44 U0097							;; below code can be possible as an alternative
     45 U0097							;; P0_HEIGHT = . - P0Frame0
     46 U0097
     47 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     48 U0097							;;  Start our ROM code at memory address $F000  
     49 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     50 U0097
     51  10000 ????				       seg	Code
     52  f000					      org	$F000
     53  f000
     54  f000				   Reset
      0  f000					      CLEAN_START		; call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     56  f00b
     57  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     58  f00b							;;  Initialize RAM variables and TIA registers 
     59  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60  f00b		       a9 0a		      lda	#10
     61  f00d		       85 81		      sta	JetYPos	; JetYPos = 10
     62  f00f		       a9 44		      lda	#68
     63  f011		       85 80		      sta	JetXPos	; JetXPos = 0
     64  f013		       a9 53		      lda	#83
     65  f015		       85 83		      sta	BomberYPos
     66  f017		       a9 3e		      lda	#62
     67  f019		       85 82		      sta	BomberXPos
     68  f01b		       a9 d4		      lda	#%11010100
     69  f01d		       85 94		      sta	Random	; Random = $D4
     70  f01f		       a9 04		      lda	#4
     71  f021		       85 84		      sta	Score
     72  f023		       a9 08		      lda	#8
     73  f025		       85 85		      sta	Timer	; Score = Timer = 0
     74  f027
     75  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     76  f027							;;  Initialize the pointers to the correct lookup table addresses 
     77  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     78  f027		       a9 c8		      lda	#<P0Frame1
     79  f029		       85 8b		      sta	P0SpritePtr	; lo-byte pointer for player sprite lookup table
     80  f02b		       a9 f2		      lda	#>P0Frame1
     81  f02d		       85 8c		      sta	P0SpritePtr+1	; hi-byte pointer for player sprite lookup table
     82  f02f
     83  f02f		       a9 ec		      lda	#<P0ColorFrame1
     84  f031		       85 8d		      sta	P0ColorPtr
     85  f033		       a9 f2		      lda	#>P0ColorFrame1
     86  f035		       85 8e		      sta	P0ColorPtr+1
     87  f037
     88  f037		       a9 da		      lda	#<P1Frame0
     89  f039		       85 8f		      sta	P1SpritePtr	; lo-byte pointer for enemy sprite lookup table
     90  f03b		       a9 f2		      lda	#>P1Frame0
     91  f03d		       85 90		      sta	P1SpritePtr+1	; hi-byte pointer for enemy sprite lookup table
     92  f03f
     93  f03f		       a9 fe		      lda	#<P1ColorFrame0
     94  f041		       85 91		      sta	P1ColorPtr
     95  f043		       a9 f2		      lda	#>P1ColorFrame0
     96  f045		       85 92		      sta	P1ColorPtr+1
     97  f047
     98  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     99  f047							;;  Start the main display loop and frame rendering 
    100  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    101  f047				   StartFrame
    102  f047
    103  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    104  f047							;;  Display VSYNC and VBLANK 
    105  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    106  f047		       a9 02		      lda	#2
    107  f049		       85 01		      sta	VBLANK	; turn on VBLANK (0010)
    108  f04b		       85 00		      sta	VSYNC	; turn on VSYNC
    109  f04d					      REPEAT	3
    110  f04d		       85 02		      sta	WSYNC	; display 3 recommended liens of VSYNC    
    109  f04d					      REPEND
    110  f04f		       85 02		      sta	WSYNC	; display 3 recommended liens of VSYNC    
    109  f04f					      REPEND
    110  f051		       85 02		      sta	WSYNC	; display 3 recommended liens of VSYNC    
    111  f053					      REPEND
    112  f053		       a9 00		      lda	#0
    113  f055		       85 00		      sta	VSYNC	; turn off VSYNC 
    114  f057					      REPEAT	33
    115  f057		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f057					      REPEND
    115  f059		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f059					      REPEND
    115  f05b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f05b					      REPEND
    115  f05d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f05d					      REPEND
    115  f05f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f05f					      REPEND
    115  f061		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f061					      REPEND
    115  f063		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f063					      REPEND
    115  f065		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f065					      REPEND
    115  f067		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f067					      REPEND
    115  f069		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f069					      REPEND
    115  f06b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f06b					      REPEND
    115  f06d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f06d					      REPEND
    115  f06f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f06f					      REPEND
    115  f071		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f071					      REPEND
    115  f073		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f073					      REPEND
    115  f075		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f075					      REPEND
    115  f077		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f077					      REPEND
    115  f079		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f079					      REPEND
    115  f07b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f07b					      REPEND
    115  f07d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f07d					      REPEND
    115  f07f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f07f					      REPEND
    115  f081		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f081					      REPEND
    115  f083		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f083					      REPEND
    115  f085		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f085					      REPEND
    115  f087		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f087					      REPEND
    115  f089		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f089					      REPEND
    115  f08b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f08b					      REPEND
    115  f08d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f08d					      REPEND
    115  f08f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f08f					      REPEND
    115  f091		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f091					      REPEND
    115  f093		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f093					      REPEND
    115  f095		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    114  f095					      REPEND
    115  f097		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    116  f099					      REPEND
    117  f099
    118  f099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    119  f099							;;  Calculations and tasks performed in the pre-VBlank
    120  f099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    121  f099		       a5 80		      lda	JetXPos
    122  f09b		       a0 00		      ldy	#0
    123  f09d		       20 17 f2 	      jsr	SetObjectXPos	; set player0 horizontal position
    124  f0a0
    125  f0a0		       a5 82		      lda	BomberXPos
    126  f0a2		       a0 01		      ldy	#1
    127  f0a4		       20 17 f2 	      jsr	SetObjectXPos	; set player1 horizontal position
    128  f0a7
    129  f0a7		       20 4e f2 	      jsr	CalculateDigitOffset	; calculate the scoreboard digit lookup table offset  
    130  f0aa
    131  f0aa		       85 02		      sta	WSYNC
    132  f0ac		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
    133  f0ae
    134  f0ae		       a9 00		      lda	#0
    135  f0b0		       85 01		      sta	VBLANK	; turn off VBLANK			
    136  f0b2
    137  f0b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    138  f0b2							;;  Display the scoreboard lines
    139  f0b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    140  f0b2		       a9 00		      lda	#0
    141  f0b4		       85 0d		      sta	PF0
    142  f0b6		       85 0e		      sta	PF1
    143  f0b8		       85 0f		      sta	PF2
    144  f0ba		       85 1b		      sta	GRP0
    145  f0bc		       85 1c		      sta	GRP1
    146  f0be		       85 09		      sta	COLUBK	; reset TIA registers before displaying the score
    147  f0c0		       85 0a		      sta	CTRLPF	; disable playfield reflection
    148  f0c2
    149  f0c2		       a9 1e		      lda	#$1E	;
    150  f0c4		       85 08		      sta	COLUPF	; set the scoreboard playfield color with yellow
    151  f0c6
    152  f0c6		       a2 05		      ldx	#DIGITS_HEIGHT	; start X counter with 5 (height of digits)
    153  f0c8
    154  f0c8				   .ScoreDigitLoop
    155  f0c8		       a4 89		      ldy	TensDigitOffset	; get the tens digit offset for the Score
    156  f0ca		       b9 6f f2 	      lda	Digits,Y	; load the bit pattern from lookup table
    157  f0cd		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    158  f0cf		       85 95		      sta	ScoreSprite	; save the score tens digit pattern in a variable
    159  f0d1		       a4 87		      ldy	OnesDigitOffset	; get the ones digit offset for the Score
    160  f0d3		       b9 6f f2 	      lda	Digits,Y	; load the digit bit pattern from lookup table
    161  f0d6		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    162  f0d8		       05 95		      ora	ScoreSprite	; merge it with the saved tens digit sprite
    163  f0da		       85 95		      sta	ScoreSprite	; and save it	 
    164  f0dc		       85 02		      sta	WSYNC	; wait for the end of scanline
    165  f0de		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    166  f0e0
    167  f0e0		       a4 8a		      ldy	TensDigitOffset+1	; get the left digit offset for the Timer
    168  f0e2		       b9 6f f2 	      lda	Digits,Y	; load the digit pattern from lookup table
    169  f0e5		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    170  f0e7		       85 96		      sta	TimerSprite	; save the timer tens digit pattern in a variable
    171  f0e9
    172  f0e9		       a4 88		      ldy	OnesDigitOffset+1	; get the ones digit offset for the Timer
    173  f0eb		       b9 6f f2 	      lda	Digits,Y	; load digit pattern from the lookup table
    174  f0ee		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    175  f0f0		       05 96		      ora	TimerSprite	; merge with the saved tens digit graphics
    176  f0f2		       85 96		      sta	TimerSprite	; and save it
    177  f0f4
    178  f0f4							; waste some cycles
    179  f0f4		       20 6e f2 	      jsr	Sleep12Cycles	; wastes some cycles	      
    180  f0f7
    181  f0f7		       85 0e		      sta	PF1	; update the playfield for Timer display
    182  f0f9
    183  f0f9		       a4 95		      ldy	ScoreSprite	; preload for the next scanline
    184  f0fb		       85 02		      sta	WSYNC	; wait for the next scanline
    185  f0fd
    186  f0fd		       84 0e		      sty	PF1	; update playfield for the score display
    187  f0ff		       e6 89		      inc	TensDigitOffset
    188  f101		       e6 8a		      inc	TensDigitOffset+1
    189  f103		       e6 87		      inc	OnesDigitOffset
    190  f105		       e6 88		      inc	OnesDigitOffset+1	; increment all digits for the next line of data
    191  f107
    192  f107		       20 6e f2 	      jsr	Sleep12Cycles	; wastes some cycles
    193  f10a
    194  f10a		       ca		      dex		; X--
    195  f10b		       85 0e		      sta	PF1
    196  f10d		       d0 b9		      bne	.ScoreDigitLoop	; if dex != 0, then branch to ScoreDigitLoop
    197  f10f
    198  f10f		       85 02		      sta	WSYNC
    199  f111		       a9 00		      lda	#0
    200  f113		       85 0d		      sta	PF0
    201  f115		       85 0e		      sta	PF1
    202  f117		       85 0f		      sta	PF2
    203  f119		       85 02		      sta	WSYNC
    204  f11b		       85 02		      sta	WSYNC
    205  f11d		       85 02		      sta	WSYNC
    206  f11f							; REPEAT 20
    207  f11f							;     sta WSYNC	    ; display 20 scanlines where the scoreboard goes
    208  f11f							; REPEND    
    209  f11f
    210  f11f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    211  f11f							;;  Display the 96 visible scanlines of our main game (2-line kernel)
    212  f11f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    213  f11f				   GameVisibleLine
    214  f11f		       a9 84		      lda	#$84
    215  f121		       85 09		      sta	COLUBK	; set color background to blue
    216  f123
    217  f123		       a9 c2		      lda	#$C2
    218  f125		       85 08		      sta	COLUPF	; set playfield/grass color to green
    219  f127
    220  f127		       a9 01		      lda	#%00000001
    221  f129		       85 0a		      sta	CTRLPF	; enable playfield reflection
    222  f12b
    223  f12b		       a9 f0		      lda	#$F0
    224  f12d		       85 0d		      sta	PF0	; setting PF0 bit pattern
    225  f12f
    226  f12f		       a9 fc		      lda	#$FC
    227  f131		       85 0e		      sta	PF1	; setting PF1 bit paattern
    228  f133
    229  f133		       a9 00		      lda	#0
    230  f135		       85 0f		      sta	PF2	; setting PF2 bit paattern
    231  f137
    232  f137		       a2 55		      ldx	#85	; X counts the number of remaining scanlines
    233  f139				   .GameLineLoop
    234  f139				   .AreWeInsidePlayerSprite
    235  f139		       8a		      txa		; transfer X to A
    236  f13a		       38		      sec		; make sure the carry flag is set before subtraction 
    237  f13b		       e5 81		      sbc	JetYPos	; subtract sprite Y-coordinate
    238  f13d		       c5 09		      cmp	P0_HEIGHT	; are we inside the sprite height bounds?
    239  f13f		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call the draw routine
    240  f141		       a9 00		      lda	#0	; else, set lookup index to zero
    241  f143				   .DrawSpriteP0
    242  f143		       18		      clc		; clear carry flag before addition
    243  f144		       65 93		      adc	P0AnimOffset	; jump to the correct sprite frame address in memory
    244  f146		       a8		      tay		; load Y so we can work with the pointer
    245  f147		       b1 8b		      lda	(P0SpritePtr),Y	; load player0 bitmap data from lookup table
    246  f149		       85 02		      sta	WSYNC	; wait for scanline
    247  f14b		       85 1b		      sta	GRP0	; set graphics for player0
    248  f14d		       b1 8d		      lda	(P0ColorPtr),Y	; load player color from lookup table
    249  f14f		       85 06		      sta	COLUP0	; set graphics of player0
    250  f151
    251  f151				   .AreWeInsideBomberSprite
    252  f151		       8a		      txa		; transfer X to A
    253  f152		       38		      sec		; make sure the carry flag is set before subtraction 
    254  f153		       e5 83		      sbc	BomberYPos	; subtract sprite Y-coordinate
    255  f155		       c5 09		      cmp	P1_HEIGHT	; are we inside the sprite height bounds?
    256  f157		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call the draw routine
    257  f159		       a9 00		      lda	#0	; else, set lookup index to zero
    258  f15b				   .DrawSpriteP1
    259  f15b		       a8		      tay		; load Y so we can work with the pointer
    260  f15c		       a9 05		      lda	#%00000101
    261  f15e		       85 05		      sta	NUSIZ1
    262  f160		       b1 8f		      lda	(P1SpritePtr),Y	; load player0 bitmap data from lookup table
    263  f162		       85 02		      sta	WSYNC	; wait for scanline
    264  f164		       85 1c		      sta	GRP1	; set graphics for player0
    265  f166		       b1 91		      lda	(P1ColorPtr),Y	; load player color from lookup table
    266  f168		       85 07		      sta	COLUP1	; set graphics of player0
    267  f16a
    268  f16a		       ca		      dex		; X--
    269  f16b		       d0 cc		      bne	.GameLineLoop	; repeat next main game scanline until finished
    270  f16d
    271  f16d		       a9 00		      lda	#0
    272  f16f		       85 93		      sta	P0AnimOffset	; reset player animation frame to zero each frame
    273  f171		       85 02		      sta	WSYNC	; wait for a scanline
    274  f173
    275  f173							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    276  f173							;;  Display Overscan 
    277  f173							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    278  f173		       a9 02		      lda	#2
    279  f175		       85 01		      sta	VBLANK	; turn VBLANK on again
    280  f177					      REPEAT	30
    281  f177		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f177					      REPEND
    281  f179		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f179					      REPEND
    281  f17b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f17b					      REPEND
    281  f17d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f17d					      REPEND
    281  f17f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f17f					      REPEND
    281  f181		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f181					      REPEND
    281  f183		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f183					      REPEND
    281  f185		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f185					      REPEND
    281  f187		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f187					      REPEND
    281  f189		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f189					      REPEND
    281  f18b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f18b					      REPEND
    281  f18d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f18d					      REPEND
    281  f18f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f18f					      REPEND
    281  f191		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f191					      REPEND
    281  f193		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f193					      REPEND
    281  f195		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f195					      REPEND
    281  f197		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f197					      REPEND
    281  f199		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f199					      REPEND
    281  f19b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f19b					      REPEND
    281  f19d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f19d					      REPEND
    281  f19f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f19f					      REPEND
    281  f1a1		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f1a1					      REPEND
    281  f1a3		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f1a3					      REPEND
    281  f1a5		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f1a5					      REPEND
    281  f1a7		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f1a7					      REPEND
    281  f1a9		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f1a9					      REPEND
    281  f1ab		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f1ab					      REPEND
    281  f1ad		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f1ad					      REPEND
    281  f1af		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    280  f1af					      REPEND
    281  f1b1		       85 02		      sta	WSYNC	; display 30 recommended lines of VBLANK Overscan
    282  f1b3					      REPEND
    283  f1b3		       a9 00		      lda	#0
    284  f1b5		       85 01		      sta	VBLANK	; turn off VBLANK
    285  f1b7
    286  f1b7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    287  f1b7							;;  Process joystick input for player0
    288  f1b7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    289  f1b7				   CheckP0Up
    290  f1b7		       a9 10		      lda	#%00010000	; player0 joystick up
    291  f1b9		       2c 80 02 	      bit	SWCHA
    292  f1bc		       d0 06		      bne	CheckP0Down	; if bit pattern doesnt match, bypass Up block
    293  f1be		       e6 81		      inc	JetYPos
    294  f1c0		       a9 00		      lda	#0
    295  f1c2		       85 93		      sta	P0AnimOffset
    296  f1c4
    297  f1c4				   CheckP0Down
    298  f1c4		       a9 20		      lda	#%00100000	; player0 joystick down
    299  f1c6		       2c 80 02 	      bit	SWCHA
    300  f1c9		       d0 06		      bne	CheckP0Left	; if bit pattern doesnt match, bypass Down block
    301  f1cb		       c6 81		      dec	JetYPos
    302  f1cd		       a9 00		      lda	#0
    303  f1cf		       85 93		      sta	P0AnimOffset
    304  f1d1
    305  f1d1				   CheckP0Left
    306  f1d1		       a9 40		      lda	#%01000000	; player0 joystick left
    307  f1d3		       2c 80 02 	      bit	SWCHA
    308  f1d6		       d0 06		      bne	CheckP0Right	; if bit pattern doesnt match, bypass Left block
    309  f1d8		       c6 80		      dec	JetXPos
    310  f1da		       a5 09		      lda	P0_HEIGHT	; 9
    311  f1dc		       85 93		      sta	P0AnimOffset	; set animation offset 
    312  f1de
    313  f1de				   CheckP0Right
    314  f1de		       a9 80		      lda	#%10000000	; player0 joystick right
    315  f1e0		       2c 80 02 	      bit	SWCHA
    316  f1e3		       d0 06		      bne	EndInputCheck	; if bit pattern doesnt match, bypass Right block
    317  f1e5		       e6 80		      inc	JetXPos
    318  f1e7		       a5 09		      lda	P0_HEIGHT	; 9
    319  f1e9		       85 93		      sta	P0AnimOffset	; set animation offset 
    320  f1eb
    321  f1eb				   EndInputCheck		; fallback when no input was performed
    322  f1eb
    323  f1eb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    324  f1eb							;;  Calculations to update position for next frame
    325  f1eb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    326  f1eb				   UpdateBomberPosition
    327  f1eb		       a5 83		      lda	BomberYPos
    328  f1ed		       18		      clc
    329  f1ee		       c9 00		      cmp	#0	; compare bomber y-position with 0
    330  f1f0		       30 05		      bmi	.ResetBomberPosition	; if it is < 0, then reset y-position to the top
    331  f1f2		       c6 83		      dec	BomberYPos	; else, decrement enemy y-position for next frame 
    332  f1f4		       4c fa f1 	      jmp	EndPositionUpdate
    333  f1f7				   .ResetBomberPosition
    334  f1f7		       20 30 f2 	      jsr	GetRandomBomberPos	; call subroutine for random x-position
    335  f1fa
    336  f1fa				   EndPositionUpdate		; fallback for the position update code
    337  f1fa
    338  f1fa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    339  f1fa							;;  Check for object collision 
    340  f1fa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    341  f1fa				   CheckCollisionP0P1
    342  f1fa		       a9 80		      lda	#%10000000	; CXPPMM bit 7 detects P0 and P1 collision
    343  f1fc		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    344  f1fe		       d0 03		      bne	.CollisionP0P1	; if collision P0 and P1 happened, game over
    345  f200		       4c 06 f2 	      jmp	CheckCollisionP0PF	; else, skip to next check
    346  f203				   .CollisionP0P1
    347  f203		       20 2b f2 	      jsr	GameOver	; call GameOver subroutine
    348  f206
    349  f206				   CheckCollisionP0PF
    350  f206		       a9 80		      lda	#%10000000	; CXP0FB bit 7 detects P0 and PF collision
    351  f208		       24 02		      bit	CXP0FB	; check CXP0FB bit 7 with the above pattern
    352  f20a		       d0 03		      bne	.CollisionP0PF	; if collision P0 and P1 happened
    353  f20c		       4c 12 f2 	      jmp	EndCollisionCheck	; else, skip to the end check
    354  f20f
    355  f20f				   .CollisionP0PF
    356  f20f		       20 2b f2 	      jsr	GameOver	; call gameOver subroutine
    357  f212
    358  f212				   EndCollisionCheck		; fallback
    359  f212		       85 2c		      sta	CXCLR	; clear all collision flags before the next frame
    360  f214
    361  f214							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    362  f214							;;  Loop back to start a brand new frame 
    363  f214							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    364  f214		       4c 47 f0 	      jmp	StartFrame	; continue to display the next frame
    365  f217
    366  f217							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    367  f217							;;  Subroutine to handle object horizontal position with fine offset
    368  f217							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    369  f217							;;  A is the target x-coordinate position in pixels of our object
    370  f217							;;  Y is the object type (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    371  f217							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    372  f217				   SetObjectXPos subroutine
    373  f217		       85 02		      sta	WSYNC	; start a fresh new scanline
    374  f219		       38		      sec		; make sure carry-flag is set before subtraction
    375  f21a				   .Div15Loop
    376  f21a		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    377  f21c		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    378  f21e		       49 07		      eor	#7	; handle offset range from -8 to 7
    379  f220		       0a		      asl
    380  f221		       0a		      asl
    381  f222		       0a		      asl
    382  f223		       0a		      asl
    383  f224		       99 20 00 	      sta	HMP0,Y	; four shift lefts to get only the top 4 bits 
    384  f227		       99 10 00 	      sta	RESP0,Y	; store the fine offset to the correct HMxx
    385  f22a		       60		      rts		; fix object position in 15-step increment
    386  f22b
    387  f22b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    388  f22b							;;  Game Over subroutine 
    389  f22b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    390  f22b				   GameOver   subroutine
    391  f22b		       a9 30		      lda	#$30
    392  f22d		       85 09		      sta	COLUBK
    393  f22f		       60		      rts
    394  f230
    395  f230							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    396  f230							;;  Subroutine to generate a Linear-Feedback Shift Register random number 
    397  f230							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    398  f230							;;  Generate a LFSR random number
    399  f230							;;  Divide the random value by 4 to limit the size of the result to match river 
    400  f230							;;  Add 30 to compensate for the left green playfield
    401  f230							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    402  f230				   GetRandomBomberPos subroutine
    403  f230		       a5 94		      lda	Random
    404  f232		       0a		      asl
    405  f233		       45 94		      eor	Random
    406  f235		       0a		      asl
    407  f236		       45 94		      eor	Random
    408  f238		       0a		      asl
    409  f239		       0a		      asl
    410  f23a		       45 94		      eor	Random
    411  f23c		       0a		      asl
    412  f23d		       26 94		      rol	Random
    413  f23f
    414  f23f		       4a		      lsr
    415  f240		       4a		      lsr		; divide by 4
    416  f241		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    417  f243		       a9 1e		      lda	#30
    418  f245		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate left PF
    419  f247		       85 82		      sta	BomberXPos	; and sets to the new value to the bomber x-position
    420  f249
    421  f249		       a9 60		      lda	#96
    422  f24b		       85 83		      sta	BomberYPos	; set the y-posotion to the top of the screen
    423  f24d		       60		      rts
    424  f24e
    425  f24e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    426  f24e							;;  Subroutine to handle scoreboard digits to be displayed on the screen
    427  f24e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    428  f24e							;; Convert the high and low nibbles of the variable Score and Timer
    429  f24e							;; into the offsets of digits lookup table so the values can be displayed.
    430  f24e							;; Each digit has a height of 5 bytes in the lookup table.
    431  f24e							;;
    432  f24e							;; For the low nibble we need to multiply by 5
    433  f24e							;;   - we can use left shifts to perform multiplication by 2
    434  f24e							;;   - for any number N, the value of [N*5 = (N*2*2)+N]
    435  f24e							;; For the upper nibble, since its already times 16, we need to divide it 
    436  f24e							;; and then multiply by 5:
    437  f24e							;;   - we can use right shifts to perform division by 2
    438  f24e							;;   - for any number N, the value of (N/16)*5=(N/2/2)+(N/2/2/2/2)  
    439  f24e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    440  f24e
    441  f24e				   CalculateDigitOffset subroutine
    442  f24e		       a2 01		      ldx	#1	; X register is the loop counter
    443  f250				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    444  f250
    445  f250		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    446  f252		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111  
    447  f254		       85 86		      sta	Temp	; save the value of A into Temp
    448  f256		       0a		      asl		; shift left (it is now N*2)
    449  f257		       0a		      asl		; shift left (it is now N*4)
    450  f258		       65 86		      adc	Temp	; add the value saved in Temp (+N)
    451  f25a		       95 87		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset  
    452  f25c
    453  f25c		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score(X=0)
    454  f25e		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    455  f260		       4a		      lsr		; shift right (it is now N/2)
    456  f261		       4a		      lsr		; shift right (it is now N/4)
    457  f262		       85 86		      sta	Temp	; save the vale of A into Temp
    458  f264		       4a		      lsr		; shift right (it is now N/8)
    459  f265		       4a		      lsr		; shift right (it is now N/16)
    460  f266		       65 86		      adc	Temp	; add the value saved in Temp (N/16 + N/4)
    461  f268		       95 89		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    462  f26a
    463  f26a		       ca		      dex		; X--
    464  f26b		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    465  f26d
    466  f26d		       60		      rts
    467  f26e
    468  f26e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    469  f26e							;;  Subroutine to waste 12 cycles
    470  f26e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    471  f26e							;; jsr takes 6 cycles
    472  f26e							;; rts takes 6 cycles
    473  f26e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    474  f26e				   Sleep12Cycles subroutine
    475  f26e		       60		      rts
    476  f26f
    477  f26f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    478  f26f							;;  Declare ROM lookup tables
    479  f26f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    480  f26f				   Digits
    481  f26f		       77		      .byte.b	%01110111	; ### ###
    482  f270		       55		      .byte.b	%01010101	; # # # #
    483  f271		       55		      .byte.b	%01010101	; # # # #
    484  f272		       55		      .byte.b	%01010101	; # # # #
    485  f273		       77		      .byte.b	%01110111	; ### ###
    486  f274
    487  f274		       11		      .byte.b	%00010001	;   #	 #
    488  f275		       11		      .byte.b	%00010001	;   #	 #
    489  f276		       11		      .byte.b	%00010001	;   #	 #
    490  f277		       11		      .byte.b	%00010001	;   #	 #
    491  f278		       11		      .byte.b	%00010001	;   #	 #
    492  f279
    493  f279		       77		      .byte.b	%01110111	; ### ###
    494  f27a		       11		      .byte.b	%00010001	;   #	 #
    495  f27b		       77		      .byte.b	%01110111	; ### ###
    496  f27c		       44		      .byte.b	%01000100	; #   #
    497  f27d		       77		      .byte.b	%01110111	; ### ###
    498  f27e
    499  f27e		       77		      .byte.b	%01110111	; ### ###
    500  f27f		       11		      .byte.b	%00010001	;   #	 #
    501  f280		       33		      .byte.b	%00110011	;  ##	##
    502  f281		       11		      .byte.b	%00010001	;   #	 #
    503  f282		       77		      .byte.b	%01110111	; ### ###
    504  f283
    505  f283		       55		      .byte.b	%01010101	; # # # #
    506  f284		       55		      .byte.b	%01010101	; # # # #
    507  f285		       77		      .byte.b	%01110111	; ### ###
    508  f286		       11		      .byte.b	%00010001	;   #	 #
    509  f287		       11		      .byte.b	%00010001	;   #	 #
    510  f288
    511  f288		       77		      .byte.b	%01110111	; ### ###
    512  f289		       44		      .byte.b	%01000100	; #   #
    513  f28a		       77		      .byte.b	%01110111	; ### ###
    514  f28b		       11		      .byte.b	%00010001	;   #	 #
    515  f28c		       77		      .byte.b	%01110111	; ### ###
    516  f28d
    517  f28d		       77		      .byte.b	%01110111	; ### ###
    518  f28e		       44		      .byte.b	%01000100	; #   #
    519  f28f		       77		      .byte.b	%01110111	; ### ###
    520  f290		       55		      .byte.b	%01010101	; # # # #
    521  f291		       77		      .byte.b	%01110111	; ### ###
    522  f292
    523  f292		       77		      .byte.b	%01110111	; ### ###
    524  f293		       11		      .byte.b	%00010001	;   #	 #
    525  f294		       11		      .byte.b	%00010001	;   #	 #
    526  f295		       11		      .byte.b	%00010001	;   #	 #
    527  f296		       11		      .byte.b	%00010001	;   #	 #
    528  f297
    529  f297		       77		      .byte.b	%01110111	; ### ###
    530  f298		       55		      .byte.b	%01010101	; # # # #
    531  f299		       77		      .byte.b	%01110111	; ### ###
    532  f29a		       55		      .byte.b	%01010101	; # # # #
    533  f29b		       77		      .byte.b	%01110111	; ### ###
    534  f29c
    535  f29c		       77		      .byte.b	%01110111	; ### ###
    536  f29d		       55		      .byte.b	%01010101	; # # # #
    537  f29e		       77		      .byte.b	%01110111	; ### ###
    538  f29f		       11		      .byte.b	%00010001	;   #	 #
    539  f2a0		       77		      .byte.b	%01110111	; ### ###
    540  f2a1
    541  f2a1		       22		      .byte.b	%00100010	;  #	#
    542  f2a2		       55		      .byte.b	%01010101	; # # # #
    543  f2a3		       77		      .byte.b	%01110111	; ### ###
    544  f2a4		       55		      .byte.b	%01010101	; # # # #
    545  f2a5		       55		      .byte.b	%01010101	; # # # #
    546  f2a6
    547  f2a6		       77		      .byte.b	%01110111	; ### ###
    548  f2a7		       55		      .byte.b	%01010101	; # # # #
    549  f2a8		       66		      .byte.b	%01100110	; ##  ##
    550  f2a9		       55		      .byte.b	%01010101	; # # # #
    551  f2aa		       77		      .byte.b	%01110111	; ### ###
    552  f2ab
    553  f2ab		       77		      .byte.b	%01110111	; ### ###
    554  f2ac		       44		      .byte.b	%01000100	; #   #
    555  f2ad		       44		      .byte.b	%01000100	; #   #
    556  f2ae		       44		      .byte.b	%01000100	; #   #
    557  f2af		       77		      .byte.b	%01110111	; ### ###
    558  f2b0
    559  f2b0		       66		      .byte.b	%01100110	; ##  ##
    560  f2b1		       55		      .byte.b	%01010101	; # # # #
    561  f2b2		       55		      .byte.b	%01010101	; # # # #
    562  f2b3		       55		      .byte.b	%01010101	; # # # #
    563  f2b4		       66		      .byte.b	%01100110	; ##  ##
    564  f2b5
    565  f2b5		       77		      .byte.b	%01110111	; ### ###
    566  f2b6		       44		      .byte.b	%01000100	; #   #
    567  f2b7		       77		      .byte.b	%01110111	; ### ###
    568  f2b8		       44		      .byte.b	%01000100	; #   #
    569  f2b9		       77		      .byte.b	%01110111	; ### ###
    570  f2ba
    571  f2ba		       77		      .byte.b	%01110111	; ### ###
    572  f2bb		       44		      .byte.b	%01000100	; #   #
    573  f2bc		       66		      .byte.b	%01100110	; ##  ##
    574  f2bd		       44		      .byte.b	%01000100	; #   #
    575  f2be		       44		      .byte.b	%01000100	; #   #
    576  f2bf
    577  f2bf				   P0Frame0
    578  f2bf		       00		      .byte.b	#%00000000
    579  f2c0		       10		      .byte.b	#%00010000	;$0E
    580  f2c1		       38		      .byte.b	#%00111000	;$06
    581  f2c2		       10		      .byte.b	#%00010000	;$0E
    582  f2c3		       10		      .byte.b	#%00010000	;$0E
    583  f2c4		       38		      .byte.b	#%00111000	;$0E
    584  f2c5		       7c		      .byte.b	#%01111100	;$0E
    585  f2c6		       10		      .byte.b	#%00010000	;$9A
    586  f2c7		       10		      .byte.b	#%00010000	;--
    587  f2c8
    588  f2c8				   P0Frame1
    589  f2c8		       00		      .byte.b	#%00000000
    590  f2c9		       08		      .byte.b	#%00001000	;$0E
    591  f2ca		       1c		      .byte.b	#%00011100	;$06
    592  f2cb		       08		      .byte.b	#%00001000	;$0E
    593  f2cc		       08		      .byte.b	#%00001000	;$0E
    594  f2cd		       3e		      .byte.b	#%00111110	;$0E
    595  f2ce		       7f		      .byte.b	#%01111111	;$0E
    596  f2cf		       08		      .byte.b	#%00001000	;$9A
    597  f2d0		       08		      .byte.b	#%00001000	;--
    598  f2d1
    599  f2d1				   P0Frame2
    600  f2d1		       00		      .byte.b	#%00000000
    601  f2d2		       04		      .byte.b	#%00000100	;$0E
    602  f2d3		       0e		      .byte.b	#%00001110	;$06
    603  f2d4		       04		      .byte.b	#%00000100	;$0E
    604  f2d5		       04		      .byte.b	#%00000100	;$0E
    605  f2d6		       0e		      .byte.b	#%00001110	;$0E
    606  f2d7		       1f		      .byte.b	#%00011111	;$0E
    607  f2d8		       04		      .byte.b	#%00000100	;$9A
    608  f2d9		       04		      .byte.b	#%00000100	;--
    609  f2da
    610  f2da				   P1Frame0
    611  f2da		       00		      .byte.b	#%00000000	;$00
    612  f2db		       08		      .byte.b	#%00001000	;$40
    613  f2dc		       2a		      .byte.b	#%00101010	;$AE
    614  f2dd		       7f		      .byte.b	#%01111111	;$44
    615  f2de		       1c		      .byte.b	#%00011100	;$44
    616  f2df		       08		      .byte.b	#%00001000	;$44
    617  f2e0		       08		      .byte.b	#%00001000	;$44
    618  f2e1		       1c		      .byte.b	#%00011100	;$40
    619  f2e2		       08		      .byte.b	#%00001000	;$40
    620  f2e3
    621  f2e3
    622  f2e3							;---Color Data from PlayerPal 2600---
    623  f2e3
    624  f2e3				   P0ColorFrame0
    625  f2e3		       00		      .byte.b	#$00
    626  f2e4		       0e		      .byte.b	#$0E	;
    627  f2e5		       06		      .byte.b	#$06	;
    628  f2e6		       0e		      .byte.b	#$0E	;
    629  f2e7		       0e		      .byte.b	#$0E	;
    630  f2e8		       0e		      .byte.b	#$0E	;
    631  f2e9		       0e		      .byte.b	#$0E	;
    632  f2ea		       9a		      .byte.b	#$9A	;
    633  f2eb		       0e		      .byte.b	#$0E	;
    634  f2ec
    635  f2ec				   P0ColorFrame1
    636  f2ec		       00		      .byte.b	#$00
    637  f2ed		       0e		      .byte.b	#$0E	;
    638  f2ee		       06		      .byte.b	#$06	;
    639  f2ef		       0e		      .byte.b	#$0E	;
    640  f2f0		       0e		      .byte.b	#$0E	;
    641  f2f1		       0e		      .byte.b	#$0E	;
    642  f2f2		       0e		      .byte.b	#$0E	;
    643  f2f3		       9a		      .byte.b	#$9A	;
    644  f2f4		       0e		      .byte.b	#$0E	;
    645  f2f5
    646  f2f5				   P0ColorFrame2
    647  f2f5		       00		      .byte.b	#$00
    648  f2f6		       0e		      .byte.b	#$0E	;
    649  f2f7		       06		      .byte.b	#$06	;
    650  f2f8		       0e		      .byte.b	#$0E	;
    651  f2f9		       0e		      .byte.b	#$0E	;
    652  f2fa		       0e		      .byte.b	#$0E	;
    653  f2fb		       0e		      .byte.b	#$0E	;
    654  f2fc		       9a		      .byte.b	#$9A	;
    655  f2fd		       0e		      .byte.b	#$0E	;
    656  f2fe
    657  f2fe				   P1ColorFrame0
    658  f2fe		       00		      .byte.b	#$00
    659  f2ff		       40		      .byte.b	#$40
    660  f300		       ae		      .byte.b	#$AE	;
    661  f301		       44		      .byte.b	#$44	;
    662  f302		       44		      .byte.b	#$44	;
    663  f303		       44		      .byte.b	#$44	;
    664  f304		       44		      .byte.b	#$44	;
    665  f305		       40		      .byte.b	#$40	;
    666  f306		       40		      .byte.b	#$40	;
    667  f307		       0e		      .byte.b	#$0E
    668  f308
    669  f308							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    670  f308							;;  Complete ROM size with exactly 4KB
    671  f308							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    672  fffc					      org	$FFFC	; move to position $FFFC
    673  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    674  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
