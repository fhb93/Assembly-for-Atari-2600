------- FILE .\ninja.asm LEVEL 1 PASS 2
      1  10000 ????						;; Exercise: Make a range from 40 pixels to 80 pixels
      2  10000 ????				       processor	6502
      3  10000 ????
------- FILE ../UTILS/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"../UTILS/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01 	     Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;	      - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;		it is safe to leave it undefined, and the base address will
     38  10000 ????						;		be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0 22/MAR/2003   Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000
     76 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     77 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     78 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     79 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     80 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     81 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     82 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     83 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     84 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     85 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     86 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     87 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     88 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     89 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     90 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     91 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     92 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     93 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     94 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     95 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     96 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     97 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     98 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     99 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    100 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    101 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    102 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    103 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    104 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    105 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    106 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    107 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    108 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    109 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    110 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    111 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    112 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    113 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    114 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    115 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    116 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    117 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    118 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    119 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    120 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    121 U002d
    122 U002d							;-------------------------------------------------------------------------------
    123 U000e ????				      SEG.U	TIA_REGISTERS_READ
    124 U0000					      ORG	TIA_BASE_READ_ADDRESS
    125 U0000							;		       bit 7   bit 6
    126 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    127 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    128 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    129 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    130 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    131 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    132 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    133 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    134 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    135 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    136 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    137 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    138 U000c		       00	   INPT4      ds	1	; $0C	 x000 0000	 Read Input (Trigger) 0
    139 U000d		       00	   INPT5      ds	1	; $0D	 x000 0000	 Read Input (Trigger) 1
    140 U000e							;-------------------------------------------------------------------------------
    141 U0298 ????				      SEG.U	RIOT
    142 U0280					      ORG	$280
    143 U0280
    144 U0280							; RIOT MEMORY MAP
    145 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    146 U0281							;     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    147 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    148 U0282		       00	   SWCHB      ds	1	; $282    Port B data (console switches)
    149 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    150 U0284		       00	   INTIM      ds	1	; $284    Timer output
    151 U0285		       00	   TIMINT     ds	1	; $285
    152 U0286							; Unused/undefined registers ($285-$294)
    153 U0286		       00		      ds	1	; $286
    154 U0287		       00		      ds	1	; $287
    155 U0288		       00		      ds	1	; $288
    156 U0289		       00		      ds	1	; $289
    157 U028a		       00		      ds	1	; $28A
    158 U028b		       00		      ds	1	; $28B
    159 U028c		       00		      ds	1	; $28C
    160 U028d		       00		      ds	1	; $28D
    161 U028e		       00		      ds	1	; $28E
    162 U028f		       00		      ds	1	; $28F
    163 U0290		       00		      ds	1	; $290
    164 U0291		       00		      ds	1	; $291
    165 U0292		       00		      ds	1	; $292
    166 U0293		       00		      ds	1	; $293
    167 U0294		       00	   TIM1T      ds	1	; $294    set 1 clock interval
    168 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    169 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    170 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    171 U0298							;-------------------------------------------------------------------------------
    172 U0298							; The following required for back-compatibility with code which does not use
    173 U0298							; segments.
    174  0000 ????				      SEG
    175  0000 ????						; EOF
------- FILE .\ninja.asm
------- FILE ../UTILS/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"../UTILS/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0 22/MAR/2003   Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE .\ninja.asm
      6  0000 ????
      7 U0083 ????				      seg.u	Variables
      8 U0080					      org	$80
      9 U0080		       00	   P0XPos     byte.b		; sprite X coordinate
     10 U0081		       00	   P0YPos     byte.b		; sprite Y coordinate
     11 U0082		       00	   P0Height   byte.b
     12  10000 ????				       seg	Code
     13  f000					      org	$F000
     14  f000
     15  f000				   Reset
      0  f000					      CLEAN_START		; macro to clean memory and TIA
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     17  f00b
     18  f00b		       a2 00		      ldx	#$00	; black background color
     19  f00d		       86 09		      stx	COLUBK
     20  f00f
     21  f00f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     22  f00f							;; Initialize variables
     23  f00f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     24  f00f		       a9 28		      lda	#40	; Register A = 40
     25  f011		       85 80		      sta	P0XPos	; initialize player X coordinate
     26  f013		       a9 64		      lda	#100
     27  f015		       85 81		      sta	P0YPos
     28  f017		       a9 08		      lda	#8
     29  f019		       85 82		      sta	P0Height
     30  f01b
     31  f01b				   StartFrame
     32  f01b		       a9 02		      lda	#2
     33  f01d		       85 01		      sta	VBLANK	; turn VBLANK on
     34  f01f		       85 00		      sta	VSYNC	; turn VSYNC on
     35  f021
     36  f021							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     37  f021							;; 3 vertical lines of VSYNC
     38  f021							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     39  f021					      REPEAT	3
     40  f021		       85 02		      sta	WSYNC
     39  f021					      REPEND
     40  f023		       85 02		      sta	WSYNC
     39  f023					      REPEND
     40  f025		       85 02		      sta	WSYNC
     41  f027					      REPEND
     42  f027		       a9 00		      lda	#0
     43  f029		       85 00		      sta	VSYNC	; turn VSYNC off
     44  f02b
     45  f02b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     46  f02b							;; Set player horizontal position while we are in the VBLANK
     47  f02b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     48  f02b		       a5 80		      lda	P0XPos	; load register A with desired X position
     49  f02d		       29 7f		      and	#$7F	; same as AND 01111111, forces bit 7 to zero
     50  f02f
     51  f02f		       85 02		      sta	WSYNC	; wait for next scanline
     52  f031		       85 2b		      sta	HMCLR	; clear old horizontal position values
     53  f033
     54  f033		       38		      sec		; set carry flag is still set
     55  f034				   DivideLoop
     56  f034		       e9 0f		      sbc	#15	; A -= 15
     57  f036		       b0 fc		      bcs	DivideLoop	; loop while carry flag is still set
     58  f038		       49 07		      eor	#7	; adjust the remainder in A between -8 and 7
     59  f03a		       0a		      asl		; shift left by 4 as HMP0 uses only 4 bits
     60  f03b		       0a		      asl
     61  f03c		       0a		      asl
     62  f03d		       0a		      asl
     63  f03e		       85 20		      sta	HMP0	; set fine position
     64  f040		       85 10		      sta	RESP0	; reset 15-step brute (rough) position
     65  f042		       85 02		      sta	WSYNC	; wait for next scanline
     66  f044		       85 2a		      sta	HMOVE	; apply the fine position offset
     67  f046
     68  f046							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     69  f046							;; Let the TIA output the (37-2) recommended lines of VBLANK
     70  f046							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     71  f046					      REPEAT	35	; 35 because 2 lines of VBLANK were spent...
     72  f046		       85 02		      sta	WSYNC	;  ... with the code above
     71  f046					      REPEND
     72  f048		       85 02		      sta	WSYNC	;  ... with the code above
     71  f048					      REPEND
     72  f04a		       85 02		      sta	WSYNC	;  ... with the code above
     71  f04a					      REPEND
     72  f04c		       85 02		      sta	WSYNC	;  ... with the code above
     71  f04c					      REPEND
     72  f04e		       85 02		      sta	WSYNC	;  ... with the code above
     71  f04e					      REPEND
     72  f050		       85 02		      sta	WSYNC	;  ... with the code above
     71  f050					      REPEND
     72  f052		       85 02		      sta	WSYNC	;  ... with the code above
     71  f052					      REPEND
     72  f054		       85 02		      sta	WSYNC	;  ... with the code above
     71  f054					      REPEND
     72  f056		       85 02		      sta	WSYNC	;  ... with the code above
     71  f056					      REPEND
     72  f058		       85 02		      sta	WSYNC	;  ... with the code above
     71  f058					      REPEND
     72  f05a		       85 02		      sta	WSYNC	;  ... with the code above
     71  f05a					      REPEND
     72  f05c		       85 02		      sta	WSYNC	;  ... with the code above
     71  f05c					      REPEND
     72  f05e		       85 02		      sta	WSYNC	;  ... with the code above
     71  f05e					      REPEND
     72  f060		       85 02		      sta	WSYNC	;  ... with the code above
     71  f060					      REPEND
     72  f062		       85 02		      sta	WSYNC	;  ... with the code above
     71  f062					      REPEND
     72  f064		       85 02		      sta	WSYNC	;  ... with the code above
     71  f064					      REPEND
     72  f066		       85 02		      sta	WSYNC	;  ... with the code above
     71  f066					      REPEND
     72  f068		       85 02		      sta	WSYNC	;  ... with the code above
     71  f068					      REPEND
     72  f06a		       85 02		      sta	WSYNC	;  ... with the code above
     71  f06a					      REPEND
     72  f06c		       85 02		      sta	WSYNC	;  ... with the code above
     71  f06c					      REPEND
     72  f06e		       85 02		      sta	WSYNC	;  ... with the code above
     71  f06e					      REPEND
     72  f070		       85 02		      sta	WSYNC	;  ... with the code above
     71  f070					      REPEND
     72  f072		       85 02		      sta	WSYNC	;  ... with the code above
     71  f072					      REPEND
     72  f074		       85 02		      sta	WSYNC	;  ... with the code above
     71  f074					      REPEND
     72  f076		       85 02		      sta	WSYNC	;  ... with the code above
     71  f076					      REPEND
     72  f078		       85 02		      sta	WSYNC	;  ... with the code above
     71  f078					      REPEND
     72  f07a		       85 02		      sta	WSYNC	;  ... with the code above
     71  f07a					      REPEND
     72  f07c		       85 02		      sta	WSYNC	;  ... with the code above
     71  f07c					      REPEND
     72  f07e		       85 02		      sta	WSYNC	;  ... with the code above
     71  f07e					      REPEND
     72  f080		       85 02		      sta	WSYNC	;  ... with the code above
     71  f080					      REPEND
     72  f082		       85 02		      sta	WSYNC	;  ... with the code above
     71  f082					      REPEND
     72  f084		       85 02		      sta	WSYNC	;  ... with the code above
     71  f084					      REPEND
     72  f086		       85 02		      sta	WSYNC	;  ... with the code above
     71  f086					      REPEND
     72  f088		       85 02		      sta	WSYNC	;  ... with the code above
     71  f088					      REPEND
     72  f08a		       85 02		      sta	WSYNC	;  ... with the code above
     73  f08c					      REPEND
     74  f08c		       a9 00		      lda	#0
     75  f08e		       85 01		      sta	VBLANK	; turn VBLANK off
     76  f090
     77  f090							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     78  f090							;; Draw the 192 visible scanlines
     79  f090							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  f090							; REPEAT 60
     81  f090							;     sta WSYNC  ; wait for 60 empty scanlines
     82  f090							; REPEND
     83  f090		       a2 c0		      ldx	#192
     84  f092
     85  f092				   Scanline
     86  f092		       8a		      txa
     87  f093		       38		      sec
     88  f094		       e5 81		      sbc	P0YPos
     89  f096		       c5 82		      cmp	P0Height
     90  f098		       90 04		      bcc	DrawBitmap
     91  f09a		       a9 00		      lda	#0
     92  f09c
     93  f09c		       a4 08		      ldy	8	; counter to draw 8 rows of bitmap
     94  f09e				   DrawBitmap
     95  f09e		       a8		      tay
     96  f09f		       b9 00 f2 	      lda	P0Bitmap,Y	; load player bitmap slice of data
     97  f0a2		       85 1b		      sta	GRP0	; set graphics for player 0 slice
     98  f0a4
     99  f0a4		       b9 09 f2 	      lda	P0Color,Y	; load player color from lookup table
    100  f0a7		       85 06		      sta	COLUP0	; set color for player slice
    101  f0a9		       85 02		      sta	WSYNC	; wait for next scanline
    102  f0ab
    103  f0ab		       88		      dey
    104  f0ac		       d0 f0		      bne	DrawBitmap	; repeat next scanline until finished
    105  f0ae
    106  f0ae		       a9 00		      lda	#0
    107  f0b0		       85 1b		      sta	GRP0	; disable P0 bitmap graphics
    108  f0b2
    109  f0b2					      REPEAT	124
    110  f0b2		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0b2					      REPEND
    110  f0b4		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0b4					      REPEND
    110  f0b6		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0b6					      REPEND
    110  f0b8		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0b8					      REPEND
    110  f0ba		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0ba					      REPEND
    110  f0bc		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0bc					      REPEND
    110  f0be		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0be					      REPEND
    110  f0c0		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0c0					      REPEND
    110  f0c2		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0c2					      REPEND
    110  f0c4		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0c4					      REPEND
    110  f0c6		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0c6					      REPEND
    110  f0c8		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0c8					      REPEND
    110  f0ca		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0ca					      REPEND
    110  f0cc		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0cc					      REPEND
    110  f0ce		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0ce					      REPEND
    110  f0d0		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0d0					      REPEND
    110  f0d2		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0d2					      REPEND
    110  f0d4		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0d4					      REPEND
    110  f0d6		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0d6					      REPEND
    110  f0d8		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0d8					      REPEND
    110  f0da		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0da					      REPEND
    110  f0dc		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0dc					      REPEND
    110  f0de		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0de					      REPEND
    110  f0e0		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0e0					      REPEND
    110  f0e2		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0e2					      REPEND
    110  f0e4		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0e4					      REPEND
    110  f0e6		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0e6					      REPEND
    110  f0e8		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0e8					      REPEND
    110  f0ea		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0ea					      REPEND
    110  f0ec		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0ec					      REPEND
    110  f0ee		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0ee					      REPEND
    110  f0f0		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0f0					      REPEND
    110  f0f2		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0f2					      REPEND
    110  f0f4		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0f4					      REPEND
    110  f0f6		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0f6					      REPEND
    110  f0f8		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0f8					      REPEND
    110  f0fa		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0fa					      REPEND
    110  f0fc		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0fc					      REPEND
    110  f0fe		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f0fe					      REPEND
    110  f100		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f100					      REPEND
    110  f102		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f102					      REPEND
    110  f104		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f104					      REPEND
    110  f106		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f106					      REPEND
    110  f108		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f108					      REPEND
    110  f10a		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f10a					      REPEND
    110  f10c		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f10c					      REPEND
    110  f10e		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f10e					      REPEND
    110  f110		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f110					      REPEND
    110  f112		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f112					      REPEND
    110  f114		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f114					      REPEND
    110  f116		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f116					      REPEND
    110  f118		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f118					      REPEND
    110  f11a		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f11a					      REPEND
    110  f11c		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f11c					      REPEND
    110  f11e		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f11e					      REPEND
    110  f120		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f120					      REPEND
    110  f122		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f122					      REPEND
    110  f124		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f124					      REPEND
    110  f126		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f126					      REPEND
    110  f128		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f128					      REPEND
    110  f12a		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f12a					      REPEND
    110  f12c		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f12c					      REPEND
    110  f12e		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f12e					      REPEND
    110  f130		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f130					      REPEND
    110  f132		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f132					      REPEND
    110  f134		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f134					      REPEND
    110  f136		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f136					      REPEND
    110  f138		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f138					      REPEND
    110  f13a		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f13a					      REPEND
    110  f13c		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f13c					      REPEND
    110  f13e		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f13e					      REPEND
    110  f140		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f140					      REPEND
    110  f142		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f142					      REPEND
    110  f144		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f144					      REPEND
    110  f146		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f146					      REPEND
    110  f148		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f148					      REPEND
    110  f14a		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f14a					      REPEND
    110  f14c		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f14c					      REPEND
    110  f14e		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f14e					      REPEND
    110  f150		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f150					      REPEND
    110  f152		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f152					      REPEND
    110  f154		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f154					      REPEND
    110  f156		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f156					      REPEND
    110  f158		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f158					      REPEND
    110  f15a		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f15a					      REPEND
    110  f15c		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f15c					      REPEND
    110  f15e		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f15e					      REPEND
    110  f160		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f160					      REPEND
    110  f162		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f162					      REPEND
    110  f164		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f164					      REPEND
    110  f166		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f166					      REPEND
    110  f168		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f168					      REPEND
    110  f16a		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f16a					      REPEND
    110  f16c		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f16c					      REPEND
    110  f16e		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f16e					      REPEND
    110  f170		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f170					      REPEND
    110  f172		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f172					      REPEND
    110  f174		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f174					      REPEND
    110  f176		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f176					      REPEND
    110  f178		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f178					      REPEND
    110  f17a		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f17a					      REPEND
    110  f17c		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f17c					      REPEND
    110  f17e		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f17e					      REPEND
    110  f180		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f180					      REPEND
    110  f182		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f182					      REPEND
    110  f184		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f184					      REPEND
    110  f186		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f186					      REPEND
    110  f188		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f188					      REPEND
    110  f18a		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f18a					      REPEND
    110  f18c		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f18c					      REPEND
    110  f18e		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f18e					      REPEND
    110  f190		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f190					      REPEND
    110  f192		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f192					      REPEND
    110  f194		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f194					      REPEND
    110  f196		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f196					      REPEND
    110  f198		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f198					      REPEND
    110  f19a		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f19a					      REPEND
    110  f19c		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f19c					      REPEND
    110  f19e		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f19e					      REPEND
    110  f1a0		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f1a0					      REPEND
    110  f1a2		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f1a2					      REPEND
    110  f1a4		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f1a4					      REPEND
    110  f1a6		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    109  f1a6					      REPEND
    110  f1a8		       85 02		      sta	WSYNC	; wait for remaining 124 empty scanlines
    111  f1aa					      REPEND
    112  f1aa
    113  f1aa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    114  f1aa							;; Output 30 more VBLANK overscan lines to complete our frame
    115  f1aa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    116  f1aa				   Overscan
    117  f1aa		       a9 02		      lda	#2
    118  f1ac		       85 01		      sta	VBLANK	; turn VBLANK on again for overscan
    119  f1ae					      REPEAT	30
    120  f1ae		       85 02		      sta	WSYNC
    119  f1ae					      REPEND
    120  f1b0		       85 02		      sta	WSYNC
    119  f1b0					      REPEND
    120  f1b2		       85 02		      sta	WSYNC
    119  f1b2					      REPEND
    120  f1b4		       85 02		      sta	WSYNC
    119  f1b4					      REPEND
    120  f1b6		       85 02		      sta	WSYNC
    119  f1b6					      REPEND
    120  f1b8		       85 02		      sta	WSYNC
    119  f1b8					      REPEND
    120  f1ba		       85 02		      sta	WSYNC
    119  f1ba					      REPEND
    120  f1bc		       85 02		      sta	WSYNC
    119  f1bc					      REPEND
    120  f1be		       85 02		      sta	WSYNC
    119  f1be					      REPEND
    120  f1c0		       85 02		      sta	WSYNC
    119  f1c0					      REPEND
    120  f1c2		       85 02		      sta	WSYNC
    119  f1c2					      REPEND
    120  f1c4		       85 02		      sta	WSYNC
    119  f1c4					      REPEND
    120  f1c6		       85 02		      sta	WSYNC
    119  f1c6					      REPEND
    120  f1c8		       85 02		      sta	WSYNC
    119  f1c8					      REPEND
    120  f1ca		       85 02		      sta	WSYNC
    119  f1ca					      REPEND
    120  f1cc		       85 02		      sta	WSYNC
    119  f1cc					      REPEND
    120  f1ce		       85 02		      sta	WSYNC
    119  f1ce					      REPEND
    120  f1d0		       85 02		      sta	WSYNC
    119  f1d0					      REPEND
    120  f1d2		       85 02		      sta	WSYNC
    119  f1d2					      REPEND
    120  f1d4		       85 02		      sta	WSYNC
    119  f1d4					      REPEND
    120  f1d6		       85 02		      sta	WSYNC
    119  f1d6					      REPEND
    120  f1d8		       85 02		      sta	WSYNC
    119  f1d8					      REPEND
    120  f1da		       85 02		      sta	WSYNC
    119  f1da					      REPEND
    120  f1dc		       85 02		      sta	WSYNC
    119  f1dc					      REPEND
    120  f1de		       85 02		      sta	WSYNC
    119  f1de					      REPEND
    120  f1e0		       85 02		      sta	WSYNC
    119  f1e0					      REPEND
    120  f1e2		       85 02		      sta	WSYNC
    119  f1e2					      REPEND
    120  f1e4		       85 02		      sta	WSYNC
    119  f1e4					      REPEND
    120  f1e6		       85 02		      sta	WSYNC
    119  f1e6					      REPEND
    120  f1e8		       85 02		      sta	WSYNC
    121  f1ea					      REPEND
    122  f1ea
    123  f1ea							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    124  f1ea							;; Increment X coordinate before next frame for animation
    125  f1ea							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    126  f1ea		       e6 80		      inc	P0XPos
    127  f1ec		       e6 81		      inc	P0YPos
    128  f1ee		       e6 81		      inc	P0YPos
    129  f1f0		       a9 50		      lda	#80
    130  f1f2		       c5 80		      cmp	P0XPos
    131  f1f4		       f0 03		      beq	ResetPos
    132  f1f6
    133  f1f6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    134  f1f6							;; Loop to next frame
    135  f1f6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    136  f1f6		       4c 1b f0 	      jmp	StartFrame
    137  f1f9
    138  f1f9				   ResetPos
    139  f1f9		       a9 28		      lda	#40	; Register A = 40
    140  f1fb		       85 80		      sta	P0XPos	; initialize player X coordinate
    141  f1fd		       4c 1b f0 	      jmp	StartFrame
    142  f200
    143  f200							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    144  f200							;;  Lookup table for the player graphics bitmap
    145  f200							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
    146  f200				   P0Bitmap
    147  f200		       00		      byte.b	#%00000000
    148  f201		       10		      byte.b	#%00010000
    149  f202		       08		      byte.b	#%00001000
    150  f203		       1c		      byte.b	#%00011100
    151  f204		       36		      byte.b	#%00110110
    152  f205		       2e		      byte.b	#%00101110
    153  f206		       2e		      byte.b	#%00101110
    154  f207		       3e		      byte.b	#%00111110
    155  f208		       1c		      byte.b	#%00011100
    156  f209
    157  f209							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    158  f209							;; Lookup table for the player colors
    159  f209							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    160  f209				   P0Color
    161  f209		       00		      byte.b	#$00
    162  f20a		       02		      byte.b	#$02
    163  f20b		       02		      byte.b	#$02
    164  f20c		       52		      byte.b	#$52
    165  f20d		       52		      byte.b	#$52
    166  f20e		       52		      byte.b	#$52
    167  f20f		       52		      byte.b	#$52
    168  f210		       52		      byte.b	#$52
    169  f211		       52		      byte.b	#$52
    170  f212
    171  f212							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    172  f212							;; Complete ROM size
    173  f212							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    174  fffc					      org	$FFFC
    175  fffc		       00 f0		      word.w	Reset
    176  fffe		       00 f0		      word.w	Reset
