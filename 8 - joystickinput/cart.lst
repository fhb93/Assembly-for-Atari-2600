------- FILE .\joystickinput.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE ../UTILS/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"../UTILS/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01 	     Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;	      - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;		it is safe to leave it undefined, and the base address will
     38  10000 ????						;		be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0 22/MAR/2003   Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000
     76 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     77 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     78 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     79 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     80 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     81 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     82 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     83 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     84 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     85 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     86 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     87 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     88 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     89 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     90 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     91 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     92 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     93 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     94 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     95 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     96 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     97 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     98 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     99 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    100 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    101 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    102 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    103 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    104 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    105 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    106 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    107 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    108 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    109 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    110 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    111 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    112 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    113 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    114 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    115 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    116 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    117 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    118 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    119 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    120 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    121 U002d
    122 U002d							;-------------------------------------------------------------------------------
    123 U000e ????				      SEG.U	TIA_REGISTERS_READ
    124 U0000					      ORG	TIA_BASE_READ_ADDRESS
    125 U0000							;		       bit 7   bit 6
    126 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    127 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    128 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    129 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    130 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    131 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    132 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    133 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    134 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    135 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    136 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    137 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    138 U000c		       00	   INPT4      ds	1	; $0C	 x000 0000	 Read Input (Trigger) 0
    139 U000d		       00	   INPT5      ds	1	; $0D	 x000 0000	 Read Input (Trigger) 1
    140 U000e							;-------------------------------------------------------------------------------
    141 U0298 ????				      SEG.U	RIOT
    142 U0280					      ORG	$280
    143 U0280
    144 U0280							; RIOT MEMORY MAP
    145 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    146 U0281							;     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    147 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    148 U0282		       00	   SWCHB      ds	1	; $282    Port B data (console switches)
    149 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    150 U0284		       00	   INTIM      ds	1	; $284    Timer output
    151 U0285		       00	   TIMINT     ds	1	; $285
    152 U0286							; Unused/undefined registers ($285-$294)
    153 U0286		       00		      ds	1	; $286
    154 U0287		       00		      ds	1	; $287
    155 U0288		       00		      ds	1	; $288
    156 U0289		       00		      ds	1	; $289
    157 U028a		       00		      ds	1	; $28A
    158 U028b		       00		      ds	1	; $28B
    159 U028c		       00		      ds	1	; $28C
    160 U028d		       00		      ds	1	; $28D
    161 U028e		       00		      ds	1	; $28E
    162 U028f		       00		      ds	1	; $28F
    163 U0290		       00		      ds	1	; $290
    164 U0291		       00		      ds	1	; $291
    165 U0292		       00		      ds	1	; $292
    166 U0293		       00		      ds	1	; $293
    167 U0294		       00	   TIM1T      ds	1	; $294    set 1 clock interval
    168 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    169 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    170 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    171 U0298							;-------------------------------------------------------------------------------
    172 U0298							; The following required for back-compatibility with code which does not use
    173 U0298							; segments.
    174  0000 ????				      SEG
    175  0000 ????						; EOF
------- FILE .\joystickinput.asm
------- FILE ../UTILS/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"../UTILS/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0 22/MAR/2003   Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE .\joystickinput.asm
      4  0000 ????
      5 U0081 ????				      seg.u	Variables
      6 U0080					      org	$80
      7 U0080		       00	   P0XPos     byte.b		; sprite X coordinate
      8 U0081
      9  10000 ????				       seg	Code
     10  f000					      org	$F000
     11  f000
     12  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     14  f00b
     15  f00b		       a2 80		      ldx	#$80	; blue background color
     16  f00d		       86 09		      stx	COLUBK
     17  f00f
     18  f00f		       a2 d0		      ldx	#$D0	; green playfield floor color
     19  f011		       86 08		      stx	COLUPF
     20  f013
     21  f013		       a9 0a		      lda	#10
     22  f015		       85 80		      sta	P0XPos
     23  f017
     24  f017
     25  f017				   StartFrame
     26  f017		       a9 02		      lda	#2
     27  f019		       85 01		      sta	VBLANK
     28  f01b		       85 00		      sta	VSYNC
     29  f01d
     30  f01d
     31  f01d					      REPEAT	3
     32  f01d		       85 02		      sta	WSYNC
     31  f01d					      REPEND
     32  f01f		       85 02		      sta	WSYNC
     31  f01f					      REPEND
     32  f021		       85 02		      sta	WSYNC
     33  f023					      REPEND
     34  f023		       a9 00		      lda	#0
     35  f025		       85 00		      sta	VSYNC
     36  f027
     37  f027							;; Set player horizontal position while in VBLANK
     38  f027		       a5 80		      lda	P0XPos
     39  f029		       29 7f		      and	#$7F
     40  f02b		       85 2b		      sta	HMCLR
     41  f02d
     42  f02d		       38		      sec
     43  f02e				   DivideLoop
     44  f02e		       e9 0f		      sbc	#15
     45  f030		       b0 fc		      bcs	DivideLoop
     46  f032
     47  f032		       49 07		      eor	#7
     48  f034		       0a		      asl
     49  f035		       0a		      asl
     50  f036		       0a		      asl
     51  f037		       0a		      asl
     52  f038		       85 20		      sta	HMP0
     53  f03a		       85 10		      sta	RESP0
     54  f03c		       85 02		      sta	WSYNC
     55  f03e		       85 2a		      sta	HMOVE
     56  f040
     57  f040					      REPEAT	35
     58  f040		       85 02		      sta	WSYNC
     57  f040					      REPEND
     58  f042		       85 02		      sta	WSYNC
     57  f042					      REPEND
     58  f044		       85 02		      sta	WSYNC
     57  f044					      REPEND
     58  f046		       85 02		      sta	WSYNC
     57  f046					      REPEND
     58  f048		       85 02		      sta	WSYNC
     57  f048					      REPEND
     58  f04a		       85 02		      sta	WSYNC
     57  f04a					      REPEND
     58  f04c		       85 02		      sta	WSYNC
     57  f04c					      REPEND
     58  f04e		       85 02		      sta	WSYNC
     57  f04e					      REPEND
     58  f050		       85 02		      sta	WSYNC
     57  f050					      REPEND
     58  f052		       85 02		      sta	WSYNC
     57  f052					      REPEND
     58  f054		       85 02		      sta	WSYNC
     57  f054					      REPEND
     58  f056		       85 02		      sta	WSYNC
     57  f056					      REPEND
     58  f058		       85 02		      sta	WSYNC
     57  f058					      REPEND
     58  f05a		       85 02		      sta	WSYNC
     57  f05a					      REPEND
     58  f05c		       85 02		      sta	WSYNC
     57  f05c					      REPEND
     58  f05e		       85 02		      sta	WSYNC
     57  f05e					      REPEND
     58  f060		       85 02		      sta	WSYNC
     57  f060					      REPEND
     58  f062		       85 02		      sta	WSYNC
     57  f062					      REPEND
     58  f064		       85 02		      sta	WSYNC
     57  f064					      REPEND
     58  f066		       85 02		      sta	WSYNC
     57  f066					      REPEND
     58  f068		       85 02		      sta	WSYNC
     57  f068					      REPEND
     58  f06a		       85 02		      sta	WSYNC
     57  f06a					      REPEND
     58  f06c		       85 02		      sta	WSYNC
     57  f06c					      REPEND
     58  f06e		       85 02		      sta	WSYNC
     57  f06e					      REPEND
     58  f070		       85 02		      sta	WSYNC
     57  f070					      REPEND
     58  f072		       85 02		      sta	WSYNC
     57  f072					      REPEND
     58  f074		       85 02		      sta	WSYNC
     57  f074					      REPEND
     58  f076		       85 02		      sta	WSYNC
     57  f076					      REPEND
     58  f078		       85 02		      sta	WSYNC
     57  f078					      REPEND
     58  f07a		       85 02		      sta	WSYNC
     57  f07a					      REPEND
     58  f07c		       85 02		      sta	WSYNC
     57  f07c					      REPEND
     58  f07e		       85 02		      sta	WSYNC
     57  f07e					      REPEND
     58  f080		       85 02		      sta	WSYNC
     57  f080					      REPEND
     58  f082		       85 02		      sta	WSYNC
     57  f082					      REPEND
     58  f084		       85 02		      sta	WSYNC
     59  f086					      REPEND
     60  f086		       a9 00		      lda	#0
     61  f088		       85 01		      sta	VBLANK
     62  f08a
     63  f08a							;; Draw the 192 visible scanlines
     64  f08a					      REPEAT	160
     65  f08a		       85 02		      sta	WSYNC
     64  f08a					      REPEND
     65  f08c		       85 02		      sta	WSYNC
     64  f08c					      REPEND
     65  f08e		       85 02		      sta	WSYNC
     64  f08e					      REPEND
     65  f090		       85 02		      sta	WSYNC
     64  f090					      REPEND
     65  f092		       85 02		      sta	WSYNC
     64  f092					      REPEND
     65  f094		       85 02		      sta	WSYNC
     64  f094					      REPEND
     65  f096		       85 02		      sta	WSYNC
     64  f096					      REPEND
     65  f098		       85 02		      sta	WSYNC
     64  f098					      REPEND
     65  f09a		       85 02		      sta	WSYNC
     64  f09a					      REPEND
     65  f09c		       85 02		      sta	WSYNC
     64  f09c					      REPEND
     65  f09e		       85 02		      sta	WSYNC
     64  f09e					      REPEND
     65  f0a0		       85 02		      sta	WSYNC
     64  f0a0					      REPEND
     65  f0a2		       85 02		      sta	WSYNC
     64  f0a2					      REPEND
     65  f0a4		       85 02		      sta	WSYNC
     64  f0a4					      REPEND
     65  f0a6		       85 02		      sta	WSYNC
     64  f0a6					      REPEND
     65  f0a8		       85 02		      sta	WSYNC
     64  f0a8					      REPEND
     65  f0aa		       85 02		      sta	WSYNC
     64  f0aa					      REPEND
     65  f0ac		       85 02		      sta	WSYNC
     64  f0ac					      REPEND
     65  f0ae		       85 02		      sta	WSYNC
     64  f0ae					      REPEND
     65  f0b0		       85 02		      sta	WSYNC
     64  f0b0					      REPEND
     65  f0b2		       85 02		      sta	WSYNC
     64  f0b2					      REPEND
     65  f0b4		       85 02		      sta	WSYNC
     64  f0b4					      REPEND
     65  f0b6		       85 02		      sta	WSYNC
     64  f0b6					      REPEND
     65  f0b8		       85 02		      sta	WSYNC
     64  f0b8					      REPEND
     65  f0ba		       85 02		      sta	WSYNC
     64  f0ba					      REPEND
     65  f0bc		       85 02		      sta	WSYNC
     64  f0bc					      REPEND
     65  f0be		       85 02		      sta	WSYNC
     64  f0be					      REPEND
     65  f0c0		       85 02		      sta	WSYNC
     64  f0c0					      REPEND
     65  f0c2		       85 02		      sta	WSYNC
     64  f0c2					      REPEND
     65  f0c4		       85 02		      sta	WSYNC
     64  f0c4					      REPEND
     65  f0c6		       85 02		      sta	WSYNC
     64  f0c6					      REPEND
     65  f0c8		       85 02		      sta	WSYNC
     64  f0c8					      REPEND
     65  f0ca		       85 02		      sta	WSYNC
     64  f0ca					      REPEND
     65  f0cc		       85 02		      sta	WSYNC
     64  f0cc					      REPEND
     65  f0ce		       85 02		      sta	WSYNC
     64  f0ce					      REPEND
     65  f0d0		       85 02		      sta	WSYNC
     64  f0d0					      REPEND
     65  f0d2		       85 02		      sta	WSYNC
     64  f0d2					      REPEND
     65  f0d4		       85 02		      sta	WSYNC
     64  f0d4					      REPEND
     65  f0d6		       85 02		      sta	WSYNC
     64  f0d6					      REPEND
     65  f0d8		       85 02		      sta	WSYNC
     64  f0d8					      REPEND
     65  f0da		       85 02		      sta	WSYNC
     64  f0da					      REPEND
     65  f0dc		       85 02		      sta	WSYNC
     64  f0dc					      REPEND
     65  f0de		       85 02		      sta	WSYNC
     64  f0de					      REPEND
     65  f0e0		       85 02		      sta	WSYNC
     64  f0e0					      REPEND
     65  f0e2		       85 02		      sta	WSYNC
     64  f0e2					      REPEND
     65  f0e4		       85 02		      sta	WSYNC
     64  f0e4					      REPEND
     65  f0e6		       85 02		      sta	WSYNC
     64  f0e6					      REPEND
     65  f0e8		       85 02		      sta	WSYNC
     64  f0e8					      REPEND
     65  f0ea		       85 02		      sta	WSYNC
     64  f0ea					      REPEND
     65  f0ec		       85 02		      sta	WSYNC
     64  f0ec					      REPEND
     65  f0ee		       85 02		      sta	WSYNC
     64  f0ee					      REPEND
     65  f0f0		       85 02		      sta	WSYNC
     64  f0f0					      REPEND
     65  f0f2		       85 02		      sta	WSYNC
     64  f0f2					      REPEND
     65  f0f4		       85 02		      sta	WSYNC
     64  f0f4					      REPEND
     65  f0f6		       85 02		      sta	WSYNC
     64  f0f6					      REPEND
     65  f0f8		       85 02		      sta	WSYNC
     64  f0f8					      REPEND
     65  f0fa		       85 02		      sta	WSYNC
     64  f0fa					      REPEND
     65  f0fc		       85 02		      sta	WSYNC
     64  f0fc					      REPEND
     65  f0fe		       85 02		      sta	WSYNC
     64  f0fe					      REPEND
     65  f100		       85 02		      sta	WSYNC
     64  f100					      REPEND
     65  f102		       85 02		      sta	WSYNC
     64  f102					      REPEND
     65  f104		       85 02		      sta	WSYNC
     64  f104					      REPEND
     65  f106		       85 02		      sta	WSYNC
     64  f106					      REPEND
     65  f108		       85 02		      sta	WSYNC
     64  f108					      REPEND
     65  f10a		       85 02		      sta	WSYNC
     64  f10a					      REPEND
     65  f10c		       85 02		      sta	WSYNC
     64  f10c					      REPEND
     65  f10e		       85 02		      sta	WSYNC
     64  f10e					      REPEND
     65  f110		       85 02		      sta	WSYNC
     64  f110					      REPEND
     65  f112		       85 02		      sta	WSYNC
     64  f112					      REPEND
     65  f114		       85 02		      sta	WSYNC
     64  f114					      REPEND
     65  f116		       85 02		      sta	WSYNC
     64  f116					      REPEND
     65  f118		       85 02		      sta	WSYNC
     64  f118					      REPEND
     65  f11a		       85 02		      sta	WSYNC
     64  f11a					      REPEND
     65  f11c		       85 02		      sta	WSYNC
     64  f11c					      REPEND
     65  f11e		       85 02		      sta	WSYNC
     64  f11e					      REPEND
     65  f120		       85 02		      sta	WSYNC
     64  f120					      REPEND
     65  f122		       85 02		      sta	WSYNC
     64  f122					      REPEND
     65  f124		       85 02		      sta	WSYNC
     64  f124					      REPEND
     65  f126		       85 02		      sta	WSYNC
     64  f126					      REPEND
     65  f128		       85 02		      sta	WSYNC
     64  f128					      REPEND
     65  f12a		       85 02		      sta	WSYNC
     64  f12a					      REPEND
     65  f12c		       85 02		      sta	WSYNC
     64  f12c					      REPEND
     65  f12e		       85 02		      sta	WSYNC
     64  f12e					      REPEND
     65  f130		       85 02		      sta	WSYNC
     64  f130					      REPEND
     65  f132		       85 02		      sta	WSYNC
     64  f132					      REPEND
     65  f134		       85 02		      sta	WSYNC
     64  f134					      REPEND
     65  f136		       85 02		      sta	WSYNC
     64  f136					      REPEND
     65  f138		       85 02		      sta	WSYNC
     64  f138					      REPEND
     65  f13a		       85 02		      sta	WSYNC
     64  f13a					      REPEND
     65  f13c		       85 02		      sta	WSYNC
     64  f13c					      REPEND
     65  f13e		       85 02		      sta	WSYNC
     64  f13e					      REPEND
     65  f140		       85 02		      sta	WSYNC
     64  f140					      REPEND
     65  f142		       85 02		      sta	WSYNC
     64  f142					      REPEND
     65  f144		       85 02		      sta	WSYNC
     64  f144					      REPEND
     65  f146		       85 02		      sta	WSYNC
     64  f146					      REPEND
     65  f148		       85 02		      sta	WSYNC
     64  f148					      REPEND
     65  f14a		       85 02		      sta	WSYNC
     64  f14a					      REPEND
     65  f14c		       85 02		      sta	WSYNC
     64  f14c					      REPEND
     65  f14e		       85 02		      sta	WSYNC
     64  f14e					      REPEND
     65  f150		       85 02		      sta	WSYNC
     64  f150					      REPEND
     65  f152		       85 02		      sta	WSYNC
     64  f152					      REPEND
     65  f154		       85 02		      sta	WSYNC
     64  f154					      REPEND
     65  f156		       85 02		      sta	WSYNC
     64  f156					      REPEND
     65  f158		       85 02		      sta	WSYNC
     64  f158					      REPEND
     65  f15a		       85 02		      sta	WSYNC
     64  f15a					      REPEND
     65  f15c		       85 02		      sta	WSYNC
     64  f15c					      REPEND
     65  f15e		       85 02		      sta	WSYNC
     64  f15e					      REPEND
     65  f160		       85 02		      sta	WSYNC
     64  f160					      REPEND
     65  f162		       85 02		      sta	WSYNC
     64  f162					      REPEND
     65  f164		       85 02		      sta	WSYNC
     64  f164					      REPEND
     65  f166		       85 02		      sta	WSYNC
     64  f166					      REPEND
     65  f168		       85 02		      sta	WSYNC
     64  f168					      REPEND
     65  f16a		       85 02		      sta	WSYNC
     64  f16a					      REPEND
     65  f16c		       85 02		      sta	WSYNC
     64  f16c					      REPEND
     65  f16e		       85 02		      sta	WSYNC
     64  f16e					      REPEND
     65  f170		       85 02		      sta	WSYNC
     64  f170					      REPEND
     65  f172		       85 02		      sta	WSYNC
     64  f172					      REPEND
     65  f174		       85 02		      sta	WSYNC
     64  f174					      REPEND
     65  f176		       85 02		      sta	WSYNC
     64  f176					      REPEND
     65  f178		       85 02		      sta	WSYNC
     64  f178					      REPEND
     65  f17a		       85 02		      sta	WSYNC
     64  f17a					      REPEND
     65  f17c		       85 02		      sta	WSYNC
     64  f17c					      REPEND
     65  f17e		       85 02		      sta	WSYNC
     64  f17e					      REPEND
     65  f180		       85 02		      sta	WSYNC
     64  f180					      REPEND
     65  f182		       85 02		      sta	WSYNC
     64  f182					      REPEND
     65  f184		       85 02		      sta	WSYNC
     64  f184					      REPEND
     65  f186		       85 02		      sta	WSYNC
     64  f186					      REPEND
     65  f188		       85 02		      sta	WSYNC
     64  f188					      REPEND
     65  f18a		       85 02		      sta	WSYNC
     64  f18a					      REPEND
     65  f18c		       85 02		      sta	WSYNC
     64  f18c					      REPEND
     65  f18e		       85 02		      sta	WSYNC
     64  f18e					      REPEND
     65  f190		       85 02		      sta	WSYNC
     64  f190					      REPEND
     65  f192		       85 02		      sta	WSYNC
     64  f192					      REPEND
     65  f194		       85 02		      sta	WSYNC
     64  f194					      REPEND
     65  f196		       85 02		      sta	WSYNC
     64  f196					      REPEND
     65  f198		       85 02		      sta	WSYNC
     64  f198					      REPEND
     65  f19a		       85 02		      sta	WSYNC
     64  f19a					      REPEND
     65  f19c		       85 02		      sta	WSYNC
     64  f19c					      REPEND
     65  f19e		       85 02		      sta	WSYNC
     64  f19e					      REPEND
     65  f1a0		       85 02		      sta	WSYNC
     64  f1a0					      REPEND
     65  f1a2		       85 02		      sta	WSYNC
     64  f1a2					      REPEND
     65  f1a4		       85 02		      sta	WSYNC
     64  f1a4					      REPEND
     65  f1a6		       85 02		      sta	WSYNC
     64  f1a6					      REPEND
     65  f1a8		       85 02		      sta	WSYNC
     64  f1a8					      REPEND
     65  f1aa		       85 02		      sta	WSYNC
     64  f1aa					      REPEND
     65  f1ac		       85 02		      sta	WSYNC
     64  f1ac					      REPEND
     65  f1ae		       85 02		      sta	WSYNC
     64  f1ae					      REPEND
     65  f1b0		       85 02		      sta	WSYNC
     64  f1b0					      REPEND
     65  f1b2		       85 02		      sta	WSYNC
     64  f1b2					      REPEND
     65  f1b4		       85 02		      sta	WSYNC
     64  f1b4					      REPEND
     65  f1b6		       85 02		      sta	WSYNC
     64  f1b6					      REPEND
     65  f1b8		       85 02		      sta	WSYNC
     64  f1b8					      REPEND
     65  f1ba		       85 02		      sta	WSYNC
     64  f1ba					      REPEND
     65  f1bc		       85 02		      sta	WSYNC
     64  f1bc					      REPEND
     65  f1be		       85 02		      sta	WSYNC
     64  f1be					      REPEND
     65  f1c0		       85 02		      sta	WSYNC
     64  f1c0					      REPEND
     65  f1c2		       85 02		      sta	WSYNC
     64  f1c2					      REPEND
     65  f1c4		       85 02		      sta	WSYNC
     64  f1c4					      REPEND
     65  f1c6		       85 02		      sta	WSYNC
     64  f1c6					      REPEND
     65  f1c8		       85 02		      sta	WSYNC
     66  f1ca					      REPEND
     67  f1ca
     68  f1ca		       a0 11		      ldy	#17
     69  f1cc				   DrawBitmap
     70  f1cc		       b9 74 f2 	      lda	P0Bitmap,Y
     71  f1cf		       85 1b		      sta	GRP0
     72  f1d1
     73  f1d1		       b9 85 f2 	      lda	P0Color,Y
     74  f1d4		       85 06		      sta	COLUP0
     75  f1d6
     76  f1d6		       85 02		      sta	WSYNC
     77  f1d8
     78  f1d8		       88		      dey
     79  f1d9		       d0 f1		      bne	DrawBitmap
     80  f1db
     81  f1db		       a9 00		      lda	#0
     82  f1dd		       85 1b		      sta	GRP0	; disable P0 bitmap graphics
     83  f1df
     84  f1df		       a9 ff		      lda	#$FF	; enable grass playfield
     85  f1e1		       85 0d		      sta	PF0
     86  f1e3		       85 0e		      sta	PF1
     87  f1e5		       85 0f		      sta	PF2
     88  f1e7
     89  f1e7					      REPEAT	15
     90  f1e7		       85 02		      sta	WSYNC
     89  f1e7					      REPEND
     90  f1e9		       85 02		      sta	WSYNC
     89  f1e9					      REPEND
     90  f1eb		       85 02		      sta	WSYNC
     89  f1eb					      REPEND
     90  f1ed		       85 02		      sta	WSYNC
     89  f1ed					      REPEND
     90  f1ef		       85 02		      sta	WSYNC
     89  f1ef					      REPEND
     90  f1f1		       85 02		      sta	WSYNC
     89  f1f1					      REPEND
     90  f1f3		       85 02		      sta	WSYNC
     89  f1f3					      REPEND
     90  f1f5		       85 02		      sta	WSYNC
     89  f1f5					      REPEND
     90  f1f7		       85 02		      sta	WSYNC
     89  f1f7					      REPEND
     90  f1f9		       85 02		      sta	WSYNC
     89  f1f9					      REPEND
     90  f1fb		       85 02		      sta	WSYNC
     89  f1fb					      REPEND
     90  f1fd		       85 02		      sta	WSYNC
     89  f1fd					      REPEND
     90  f1ff		       85 02		      sta	WSYNC
     89  f1ff					      REPEND
     90  f201		       85 02		      sta	WSYNC
     89  f201					      REPEND
     90  f203		       85 02		      sta	WSYNC
     91  f205					      REPEND
     92  f205
     93  f205		       a9 00		      lda	#0	; disable grass playfield
     94  f207		       85 0d		      sta	PF0
     95  f209		       85 0e		      sta	PF1
     96  f20b		       85 0f		      sta	PF2
     97  f20d
     98  f20d				   Overscan
     99  f20d		       a9 02		      lda	#2
    100  f20f		       85 01		      sta	VBLANK
    101  f211					      REPEAT	30
    102  f211		       85 02		      sta	WSYNC
    101  f211					      REPEND
    102  f213		       85 02		      sta	WSYNC
    101  f213					      REPEND
    102  f215		       85 02		      sta	WSYNC
    101  f215					      REPEND
    102  f217		       85 02		      sta	WSYNC
    101  f217					      REPEND
    102  f219		       85 02		      sta	WSYNC
    101  f219					      REPEND
    102  f21b		       85 02		      sta	WSYNC
    101  f21b					      REPEND
    102  f21d		       85 02		      sta	WSYNC
    101  f21d					      REPEND
    102  f21f		       85 02		      sta	WSYNC
    101  f21f					      REPEND
    102  f221		       85 02		      sta	WSYNC
    101  f221					      REPEND
    102  f223		       85 02		      sta	WSYNC
    101  f223					      REPEND
    102  f225		       85 02		      sta	WSYNC
    101  f225					      REPEND
    102  f227		       85 02		      sta	WSYNC
    101  f227					      REPEND
    102  f229		       85 02		      sta	WSYNC
    101  f229					      REPEND
    102  f22b		       85 02		      sta	WSYNC
    101  f22b					      REPEND
    102  f22d		       85 02		      sta	WSYNC
    101  f22d					      REPEND
    102  f22f		       85 02		      sta	WSYNC
    101  f22f					      REPEND
    102  f231		       85 02		      sta	WSYNC
    101  f231					      REPEND
    102  f233		       85 02		      sta	WSYNC
    101  f233					      REPEND
    102  f235		       85 02		      sta	WSYNC
    101  f235					      REPEND
    102  f237		       85 02		      sta	WSYNC
    101  f237					      REPEND
    102  f239		       85 02		      sta	WSYNC
    101  f239					      REPEND
    102  f23b		       85 02		      sta	WSYNC
    101  f23b					      REPEND
    102  f23d		       85 02		      sta	WSYNC
    101  f23d					      REPEND
    102  f23f		       85 02		      sta	WSYNC
    101  f23f					      REPEND
    102  f241		       85 02		      sta	WSYNC
    101  f241					      REPEND
    102  f243		       85 02		      sta	WSYNC
    101  f243					      REPEND
    102  f245		       85 02		      sta	WSYNC
    101  f245					      REPEND
    102  f247		       85 02		      sta	WSYNC
    101  f247					      REPEND
    102  f249		       85 02		      sta	WSYNC
    101  f249					      REPEND
    102  f24b		       85 02		      sta	WSYNC
    103  f24d					      REPEND
    104  f24d
    105  f24d							;; Joystick input test for P0-up and P0-down
    106  f24d
    107  f24d				   CheckP0Up
    108  f24d		       a9 10		      lda	#%00010000
    109  f24f		       2c 80 02 	      bit	SWCHA
    110  f252		       d0 02		      bne	CheckP0Down
    111  f254		       e6 80		      inc	P0XPos
    112  f256							;; Logic when player 0 UP is pressed
    113  f256
    114  f256				   CheckP0Down
    115  f256		       a9 20		      lda	#%00100000
    116  f258		       2c 80 02 	      bit	SWCHA
    117  f25b		       d0 02		      bne	CheckP0Left
    118  f25d		       c6 80		      dec	P0XPos
    119  f25f
    120  f25f							;; Logic when player 0 Down is pressed   
    121  f25f
    122  f25f				   CheckP0Left
    123  f25f		       a9 40		      lda	#%01000000
    124  f261		       2c 80 02 	      bit	SWCHA
    125  f264		       d0 02		      bne	CheckP0Right
    126  f266		       c6 80		      dec	P0XPos
    127  f268							;; Logic when player 0 Left is pressed   
    128  f268
    129  f268				   CheckP0Right
    130  f268		       a9 80		      lda	#%10000000
    131  f26a		       2c 80 02 	      bit	SWCHA
    132  f26d		       d0 02		      bne	NoInput
    133  f26f		       e6 80		      inc	P0XPos
    134  f271							;; Logic when player 0 Right is pressed
    135  f271
    136  f271				   NoInput
    137  f271
    138  f271							;; Fallback when no input was performed
    139  f271
    140  f271							;; Loop to next frame
    141  f271		       4c 17 f0 	      jmp	StartFrame
    142  f274
    143  f274				   P0Bitmap
    144  f274		       00		      byte.b	#%00000000
    145  f275		       14		      byte.b	#%00010100
    146  f276		       14		      byte.b	#%00010100
    147  f277		       14		      byte.b	#%00010100
    148  f278		       14		      byte.b	#%00010100
    149  f279		       14		      byte.b	#%00010100
    150  f27a		       1c		      byte.b	#%00011100
    151  f27b		       5d		      byte.b	#%01011101
    152  f27c		       5d		      byte.b	#%01011101
    153  f27d		       5d		      byte.b	#%01011101
    154  f27e		       5d		      byte.b	#%01011101
    155  f27f		       7f		      byte.b	#%01111111
    156  f280		       3e		      byte.b	#%00111110
    157  f281		       10		      byte.b	#%00010000
    158  f282		       1c		      byte.b	#%00011100
    159  f283		       1c		      byte.b	#%00011100
    160  f284		       1c		      byte.b	#%00011100
    161  f285
    162  f285							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    163  f285							;; Lookup table for the player colors
    164  f285							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    165  f285				   P0Color
    166  f285		       00		      byte.b	#$00
    167  f286		       f6		      byte.b	#$F6
    168  f287		       f2		      byte.b	#$F2
    169  f288		       f2		      byte.b	#$F2
    170  f289		       f2		      byte.b	#$F2
    171  f28a		       f2		      byte.b	#$F2
    172  f28b		       f2		      byte.b	#$F2
    173  f28c		       c2		      byte.b	#$C2
    174  f28d		       c2		      byte.b	#$C2
    175  f28e		       c2		      byte.b	#$C2
    176  f28f		       c2		      byte.b	#$C2
    177  f290		       c2		      byte.b	#$C2
    178  f291		       c2		      byte.b	#$C2
    179  f292		       3e		      byte.b	#$3E
    180  f293		       3e		      byte.b	#$3E
    181  f294		       3e		      byte.b	#$3E
    182  f295		       24		      byte.b	#$24
    183  f296
    184  f296							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    185  f296							;; Complete ROM size
    186  f296							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    187  fffc					      org	$FFFC
    188  fffc		       00 f0		      word.w	Reset
    189  fffe		       00 f0		      word.w	Reset
