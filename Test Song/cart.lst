------- FILE .\Spookyard.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE ../UTILS/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"../UTILS/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01 	     Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;	      - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;		it is safe to leave it undefined, and the base address will
     38  10000 ????						;		be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0 22/MAR/2003   Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000
     76 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     77 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     78 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     79 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     80 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     81 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     82 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     83 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     84 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     85 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     86 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     87 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     88 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     89 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     90 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     91 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     92 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     93 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     94 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     95 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     96 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     97 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     98 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     99 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    100 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    101 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    102 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    103 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    104 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    105 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    106 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    107 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    108 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    109 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    110 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    111 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    112 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    113 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    114 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    115 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    116 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    117 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    118 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    119 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    120 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    121 U002d
    122 U002d							;-------------------------------------------------------------------------------
    123 U000e ????				      SEG.U	TIA_REGISTERS_READ
    124 U0000					      ORG	TIA_BASE_READ_ADDRESS
    125 U0000							;		       bit 7   bit 6
    126 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    127 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    128 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    129 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    130 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    131 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    132 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    133 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    134 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    135 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    136 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    137 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    138 U000c		       00	   INPT4      ds	1	; $0C	 x000 0000	 Read Input (Trigger) 0
    139 U000d		       00	   INPT5      ds	1	; $0D	 x000 0000	 Read Input (Trigger) 1
    140 U000e							;-------------------------------------------------------------------------------
    141 U0298 ????				      SEG.U	RIOT
    142 U0280					      ORG	$280
    143 U0280
    144 U0280							; RIOT MEMORY MAP
    145 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    146 U0281							;     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    147 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    148 U0282		       00	   SWCHB      ds	1	; $282    Port B data (console switches)
    149 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    150 U0284		       00	   INTIM      ds	1	; $284    Timer output
    151 U0285		       00	   TIMINT     ds	1	; $285
    152 U0286							; Unused/undefined registers ($285-$294)
    153 U0286		       00		      ds	1	; $286
    154 U0287		       00		      ds	1	; $287
    155 U0288		       00		      ds	1	; $288
    156 U0289		       00		      ds	1	; $289
    157 U028a		       00		      ds	1	; $28A
    158 U028b		       00		      ds	1	; $28B
    159 U028c		       00		      ds	1	; $28C
    160 U028d		       00		      ds	1	; $28D
    161 U028e		       00		      ds	1	; $28E
    162 U028f		       00		      ds	1	; $28F
    163 U0290		       00		      ds	1	; $290
    164 U0291		       00		      ds	1	; $291
    165 U0292		       00		      ds	1	; $292
    166 U0293		       00		      ds	1	; $293
    167 U0294		       00	   TIM1T      ds	1	; $294    set 1 clock interval
    168 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    169 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    170 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    171 U0298							;-------------------------------------------------------------------------------
    172 U0298							; The following required for back-compatibility with code which does not use
    173 U0298							; segments.
    174  0000 ????				      SEG
    175  0000 ????						; EOF
------- FILE .\Spookyard.asm
------- FILE ../UTILS/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"../UTILS/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0 22/MAR/2003   Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE .\Spookyard.asm
      4  0000 ????
      5 U0080 ????				      seg.u	Variables
      6 U0080					      org	$80
      7 U0080		       00 80	   Channel_1Duration =	$80
      8 U0080		       00 81	   Channel_1Counter =	$81	; This is a pointer, needs 16 bits
      9 U0080
     10 U0080
     11  10000 ????				       seg	Code
     12  f000					      org	$F000
     13  f000
     14  f000				   RestartMusic
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     16  f00b		       a9 01		      LDA	#1
     17  f00d		       85 80		      STA	Channel_1Duration
     18  f00f		       a9 8b		      LDA	#<MusicChannel_1
     19  f011		       85 81		      STA	Channel_1Counter
     20  f013		       a9 f0		      LDA	#>MusicChannel_1
     21  f015		       85 82		      STA	Channel_1Counter+1
     22  f017
     23  f017
     24  f017
     25  f017				   Game
     26  f017							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     27  f017							;; Generate the three lines of VSYNC
     28  f017							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     29  f017		       85 02		      sta	WSYNC	; first scanline
     30  f019		       85 02		      sta	WSYNC	; second scanline
     31  f01b		       85 02		      sta	WSYNC	; third scanline
     32  f01d
     33  f01d		       a9 00		      lda	#0
     34  f01f		       85 00		      sta	VSYNC	; turn off VSYNC
     35  f021
     36  f021							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     37  f021							;; Let the TIA output the recommended 37 scanlines of VBLANK 
     38  f021							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     39  f021		       a2 25		      ldx	#37	; X = 37
     40  f023				   LoopVBlank
     41  f023		       85 02		      sta	WSYNC	; hit WSYNC and wait for the next scanline
     42  f025		       ca		      dex		; X--
     43  f026		       d0 fb		      bne	LoopVBlank	; loop while X != 0
     44  f028		       a9 00		      lda	#0
     45  f02a		       85 01		      sta	VBLANK	; turn off the VBLANK
     46  f02c
     47  f02c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     48  f02c							;; Draw 192 visible scanlines (kernel) 
     49  f02c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     50  f02c		       a2 c0		      ldx	#192	; counter for 192 visible scanlines
     51  f02e				   LoopVisible
     52  f02e							;stx COLUBK	      ; set the background color
     53  f02e		       85 02		      sta	WSYNC	; wait for the next scanline
     54  f030		       ca		      dex		; X--
     55  f031		       d0 fb		      bne	LoopVisible	; loop while X != 0
     56  f033
     57  f033							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     58  f033							;; Output 30 more VBLANK lines (overscan) to complete our frame 
     59  f033							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60  f033		       a9 02		      lda	#2	; hit and turn on VBLANK again
     61  f035		       85 01		      sta	VBLANK
     62  f037
     63  f037		       a2 1e		      ldx	#30	; counter for 30 scanlines
     64  f039				   LoopOverscan
     65  f039		       85 02		      sta	WSYNC	; wait for the next scanline
     66  f03b		       ca		      dex		; X--
     67  f03c		       d0 fb		      bne	LoopOverscan	; loop while X != 0
     68  f03e
     69  f03e				   Music_Player
     70  f03e				   LoadNext1
     71  f03e		       c6 80		      DEC	Channel_1Duration
     72  f040		       a5 80		      LDA	Channel_1Duration
     73  f042		       d0 44		      BNE	LoadNext2
     74  f044		       a2 81		      LDX	#Channel_1Counter
     75  f046		       a1 00		      LDA	(0,x)
     76  f048		       f6 00		      INC	0,x
     77  f04a		       d0 02		      BNE	*+4
     78  f04c		       f6 01		      INC	1,x
     79  f04e		       c9 ff		      CMP	#255
     80  f050		       d0 12		      BNE	Not255_1
     81  f052		       a9 8b		      LDA	#<MusicChannel_1
     82  f054		       85 81		      STA	Channel_1Counter
     83  f056		       a9 f0		      LDA	#>MusicChannel_1
     84  f058		       85 82		      STA	Channel_1Counter+1
     85  f05a		       a2 81		      LDX	#Channel_1Counter
     86  f05c		       a1 00		      LDA	(0,x)
     87  f05e		       f6 00		      INC	0,x
     88  f060		       d0 02		      BNE	*+4
     89  f062		       f6 01		      INC	1,x
     90  f064				   Not255_1
     91  f064		       85 19		      STA	AUDV0
     92  f066		       c9 00		      CMP	#0
     93  f068		       f0 12		      BEQ	GotoDuration1
     94  f06a		       4a		      lsr
     95  f06b		       4a		      lsr
     96  f06c		       4a		      lsr
     97  f06d		       4a		      lsr
     98  f06e		       85 15		      STA	AUDC0
     99  f070		       a2 81		      LDX	#Channel_1Counter
    100  f072		       a1 00		      LDA	(0,x)
    101  f074		       f6 00		      INC	0,x
    102  f076		       d0 02		      BNE	*+4
    103  f078		       f6 01		      INC	1,x
    104  f07a		       85 17		      STA	AUDF0
    105  f07c				   GotoDuration1
    106  f07c		       a2 81		      LDX	#Channel_1Counter
    107  f07e		       a1 00		      LDA	(0,x)
    108  f080		       f6 00		      INC	0,x
    109  f082		       d0 02		      BNE	*+4
    110  f084		       f6 01		      INC	1,x
    111  f086		       85 80		      STA	Channel_1Duration
    112  f088				   LoadNext2
    113  f088				   LoadEnd
    114  f088		       4c 17 f0 	      JMP	Game
    115  f08b
    116  f08b				   MusicChannel_1
    117  f08b		       c8		      .BYTE.b	#%11001000
    118  f08c		       0c		      .BYTE.b	#12
    119  f08d		       30		      .BYTE.b	#48
    120  f08e		       00		      .BYTE.b	#0
    121  f08f		       02		      .BYTE.b	#2
    122  f090		       48		      .BYTE.b	#%01001000
    123  f091		       1a		      .BYTE.b	#26
    124  f092		       30		      .BYTE.b	#48
    125  f093		       00		      .BYTE.b	#0
    126  f094		       02		      .BYTE.b	#2
    127  f095		       48		      .BYTE.b	#%01001000
    128  f096		       1b		      .BYTE.b	#27
    129  f097		       5e		      .BYTE.b	#94
    130  f098		       00		      .BYTE.b	#0
    131  f099		       05		      .BYTE.b	#5
    132  f09a		       c8		      .BYTE.b	#%11001000
    133  f09b		       0c		      .BYTE.b	#12
    134  f09c		       30		      .BYTE.b	#48
    135  f09d		       00		      .BYTE.b	#0
    136  f09e		       03		      .BYTE.b	#3
    137  f09f		       c8		      .BYTE.b	#%11001000
    138  f0a0		       0a		      .BYTE.b	#10
    139  f0a1		       30		      .BYTE.b	#48
    140  f0a2		       00		      .BYTE.b	#0
    141  f0a3		       02		      .BYTE.b	#2
    142  f0a4		       c8		      .BYTE.b	#%11001000
    143  f0a5		       0b		      .BYTE.b	#11
    144  f0a6		       5e		      .BYTE.b	#94
    145  f0a7		       00		      .BYTE.b	#0
    146  f0a8		       05		      .BYTE.b	#5
    147  f0a9		       c8		      .BYTE.b	#%11001000
    148  f0aa		       0c		      .BYTE.b	#12
    149  f0ab		       30		      .BYTE.b	#48
    150  f0ac		       00		      .BYTE.b	#0
    151  f0ad		       03		      .BYTE.b	#3
    152  f0ae		       48		      .BYTE.b	#%01001000
    153  f0af		       1a		      .BYTE.b	#26
    154  f0b0		       30		      .BYTE.b	#48
    155  f0b1		       00		      .BYTE.b	#0
    156  f0b2		       02		      .BYTE.b	#2
    157  f0b3		       48		      .BYTE.b	#%01001000
    158  f0b4		       1b		      .BYTE.b	#27
    159  f0b5		       5e		      .BYTE.b	#94
    160  f0b6		       00		      .BYTE.b	#0
    161  f0b7		       05		      .BYTE.b	#5
    162  f0b8		       c8		      .BYTE.b	#%11001000
    163  f0b9		       0c		      .BYTE.b	#12
    164  f0ba		       30		      .BYTE.b	#48
    165  f0bb		       00		      .BYTE.b	#0
    166  f0bc		       03		      .BYTE.b	#3
    167  f0bd		       c8		      .BYTE.b	#%11001000
    168  f0be		       0a		      .BYTE.b	#10
    169  f0bf		       30		      .BYTE.b	#48
    170  f0c0		       00		      .BYTE.b	#0
    171  f0c1		       02		      .BYTE.b	#2
    172  f0c2		       c8		      .BYTE.b	#%11001000
    173  f0c3		       0b		      .BYTE.b	#11
    174  f0c4		       5e		      .BYTE.b	#94
    175  f0c5		       00		      .BYTE.b	#0
    176  f0c6		       69		      .BYTE.b	#105
    177  f0c7		       c8		      .BYTE.b	#%11001000
    178  f0c8		       0c		      .BYTE.b	#12
    179  f0c9		       18		      .BYTE.b	#24
    180  f0ca		       00		      .BYTE.b	#0
    181  f0cb		       01		      .BYTE.b	#1
    182  f0cc		       c8		      .BYTE.b	#%11001000
    183  f0cd		       0a		      .BYTE.b	#10
    184  f0ce		       0c		      .BYTE.b	#12
    185  f0cf		       00		      .BYTE.b	#0
    186  f0d0		       01		      .BYTE.b	#1
    187  f0d1		       c8		      .BYTE.b	#%11001000
    188  f0d2		       0c		      .BYTE.b	#12
    189  f0d3		       18		      .BYTE.b	#24
    190  f0d4		       ff		      .BYTE.b	#255
    191  f0d5
    192  fffc					      org	$fffc
    193  fffc
    194  fffc		       00 f0		      .word.w	RestartMusic
    195  fffe		       00 f0		      .word.w	RestartMusic
