------- FILE ELF.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE ../UTILS/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"../UTILS/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01 	     Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;	      - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;		it is safe to leave it undefined, and the base address will
     38  10000 ????						;		be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0 22/MAR/2003   Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000
     76 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     77 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     78 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     79 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     80 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     81 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     82 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     83 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     84 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     85 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     86 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     87 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     88 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     89 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     90 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     91 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     92 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     93 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     94 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     95 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     96 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     97 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     98 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     99 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    100 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    101 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    102 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    103 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    104 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    105 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    106 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    107 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    108 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    109 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    110 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    111 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    112 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    113 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    114 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    115 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    116 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    117 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    118 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    119 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    120 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    121 U002d
    122 U002d							;-------------------------------------------------------------------------------
    123 U000e ????				      SEG.U	TIA_REGISTERS_READ
    124 U0000					      ORG	TIA_BASE_READ_ADDRESS
    125 U0000							;		       bit 7   bit 6
    126 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    127 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    128 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    129 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    130 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    131 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    132 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    133 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    134 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    135 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    136 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    137 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    138 U000c		       00	   INPT4      ds	1	; $0C	 x000 0000	 Read Input (Trigger) 0
    139 U000d		       00	   INPT5      ds	1	; $0D	 x000 0000	 Read Input (Trigger) 1
    140 U000e							;-------------------------------------------------------------------------------
    141 U0298 ????				      SEG.U	RIOT
    142 U0280					      ORG	$280
    143 U0280
    144 U0280							; RIOT MEMORY MAP
    145 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    146 U0281							;     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    147 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    148 U0282		       00	   SWCHB      ds	1	; $282    Port B data (console switches)
    149 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    150 U0284		       00	   INTIM      ds	1	; $284    Timer output
    151 U0285		       00	   TIMINT     ds	1	; $285
    152 U0286							; Unused/undefined registers ($285-$294)
    153 U0286		       00		      ds	1	; $286
    154 U0287		       00		      ds	1	; $287
    155 U0288		       00		      ds	1	; $288
    156 U0289		       00		      ds	1	; $289
    157 U028a		       00		      ds	1	; $28A
    158 U028b		       00		      ds	1	; $28B
    159 U028c		       00		      ds	1	; $28C
    160 U028d		       00		      ds	1	; $28D
    161 U028e		       00		      ds	1	; $28E
    162 U028f		       00		      ds	1	; $28F
    163 U0290		       00		      ds	1	; $290
    164 U0291		       00		      ds	1	; $291
    165 U0292		       00		      ds	1	; $292
    166 U0293		       00		      ds	1	; $293
    167 U0294		       00	   TIM1T      ds	1	; $294    set 1 clock interval
    168 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    169 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    170 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    171 U0298							;-------------------------------------------------------------------------------
    172 U0298							; The following required for back-compatibility with code which does not use
    173 U0298							; segments.
    174  0000 ????				      SEG
    175  0000 ????						; EOF
------- FILE ELF.asm
------- FILE ../UTILS/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"../UTILS/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0 22/MAR/2003   Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE ELF.asm
      5  0000 ????
      6 U0084 ????				      seg.u	Variables
      7 U0080					      org	$80
      8 U0080
      9 U0080							; Variables here
     10 U0080
     11 U0080		       00	   logo_height byte.b
     12 U0081		       00	   logo_color byte.b
     13 U0082		       00	   temp1      byte.b
     14 U0083		       00	   temp2      byte.b
     15 U0084
     16  10000 ????				       seg	Code
     17  f000					      org	$F000
     18  f000
     19  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     21  f00b
     22  f00b
     23  f00b
     24  f00b				   LogoFrame
     25  f00b							; Enable VBLANK
     26  f00b		       a9 01		      lda	#1
     27  f00d		       85 80		      sta	logo_height
     28  f00f
     29  f00f		       a9 02		      lda	#2
     30  f011		       85 01		      sta	VBLANK
     31  f013		       85 00		      sta	VSYNC
     32  f015		       a9 1a		      lda	#26
     33  f017		       8d 95 02 	      sta	TIM8T
     34  f01a				   LogoWaitVSync
     35  f01a		       ad 84 02 	      lda	INTIM
     36  f01d		       d0 fb		      bne	LogoWaitVSync
     37  f01f		       85 02		      sta	WSYNC	; 3	 (0)
     38  f021		       85 00		      sta	VSYNC	; 3	 (3)
     39  f023
     40  f023							; 37 lines of VBLANK
     41  f023		       a9 2c		      lda	#44	; 2	 (5)
     42  f025		       8d 96 02 	      sta	TIM64T	; 3	 (8)
      0  f028					      sleep	5	; 5	 (13)
      1  f028				   .CYCLES    SET	5
      2  f028
      3  f028				  -	      IF	.CYCLES < 2
      4  f028				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f028				  -	      ERR
      6  f028					      ENDIF
      7  f028
      8  f028					      IF	.CYCLES & 1
      9  f028					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f028		       04 00		      nop	0
     11  f02a				  -	      ELSE
     12  f02a				  -	      bit	VSYNC
     13  f02a					      ENDIF
     14  f02a				   .CYCLES    SET	.CYCLES - 3
     15  f02a					      ENDIF
     16  f02a
     17  f02a					      REPEAT	.CYCLES / 2
     18  f02a		       ea		      nop
     19  f02b					      REPEND
     44  f02b		       a9 01		      lda	#1	; 2	 (15)
     45  f02d		       85 25		      sta	VDELP0	; 3	 (18)
     46  f02f		       85 26		      sta	VDELP1	; 3	 (21)
     47  f031		       a9 a6		      lda	#$A6	; 2	 (23)
     48  f033		       85 08		      sta	COLUPF	; 3	 (26)
      0  f035					      sleep	10	; 10	 (36)
      1  f035				   .CYCLES    SET	10
      2  f035
      3  f035				  -	      IF	.CYCLES < 2
      4  f035				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f035				  -	      ERR
      6  f035					      ENDIF
      7  f035
      8  f035				  -	      IF	.CYCLES & 1
      9  f035				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f035				  -	      nop	0
     11  f035				  -	      ELSE
     12  f035				  -	      bit	VSYNC
     13  f035				  -	      ENDIF
     14  f035				  -.CYCLES    SET	.CYCLES - 3
     15  f035					      ENDIF
     16  f035
     17  f035					      REPEAT	.CYCLES / 2
     18  f035		       ea		      nop
     17  f035					      REPEND
     18  f036		       ea		      nop
     17  f036					      REPEND
     18  f037		       ea		      nop
     17  f037					      REPEND
     18  f038		       ea		      nop
     17  f038					      REPEND
     18  f039		       ea		      nop
     19  f03a					      REPEND
     50  f03a		       85 10		      sta	RESP0	; 3	 (39)
     51  f03c		       85 11		      sta	RESP1	; 3	 (42)
     52  f03e		       a9 20		      lda	#$20	; 2	 (44)
     53  f040		       85 21		      sta	HMP1	; 2	 (47)
     54  f042		       a9 10		      lda	#$10	; 2	 (49)
     55  f044		       85 20		      sta	HMP0	; 3	 (52)
     56  f046		       a9 33		      lda	#$33	; 2	 (54)
     57  f048		       85 04		      sta	NUSIZ0	; 3	 (57)
     58  f04a		       85 05		      STA	NUSIZ1	; 3	 (60)
     59  f04c		       85 02		      sta	WSYNC
     60  f04e		       85 2a		      sta	HMOVE
     61  f050		       a9 81		      lda	#logo_color
     62  f052		       85 06		      sta	COLUP0
     63  f054		       85 07		      sta	COLUP1
     64  f056
     65  f056
     66  f056				   LogoWaitVBlank
     67  f056		       ad 84 02 	      lda	INTIM
     68  f059		       d0 fb		      bne	LogoWaitVBlank	; loop until timer expires
     69  f05b		       85 02		      sta	WSYNC
     70  f05d
     71  f05d							; disable VBLANK
     72  f05d		       a9 00		      lda	#0
     73  f05f		       85 01		      sta	VBLANK
     74  f061
     75  f061							; waste 51 scanlines
     76  f061							;	ldx #51
     77  f061		       a2 20		      ldx	#(96 - (logo_height/2))
     78  f063				   LogoVisibleScreen
     79  f063		       85 02		      sta	WSYNC
     80  f065		       ca		      dex
     81  f066		       d0 fb		      bne	LogoVisibleScreen
     82  f068
     83  f068
     84  f068
     85  f068							; Blank Screen and Set Playfield
     86  f068
     87  f068		       a0 7f		      ldy	#logo_height-1
     88  f06a		       b9 00 f4 	      lda	logo_colors,Y
     89  f06d		       85 06		      sta	COLUP0
     90  f06f		       85 07		      sta	COLUP1
     91  f071
     92  f071				   LogoLoop
     93  f071		       85 02		      sta	WSYNC	; 3	 (0)
     94  f073		       84 82		      sty	temp1	; 3	 (3)
     95  f075		       b9 00 f1 	      lda	logo_0,Y	; 4	 (7)
     96  f078		       85 1b		      sta	GRP0	; 3	 (10) 0 -> [GRP0]
     97  f07a		       b9 4b f1 	      lda	logo_1,Y	; 4	 (14)
     98  f07d		       85 1c		      sta	GRP1	; 3	 (17) 1 -> [GRP1] ; 0 -> GRP0
     99  f07f		       b9 00 f2 	      lda	logo_2,Y	; 4	 (21)
    100  f082		       85 1b		      sta	GRP0	; 3	 (24*) 2 -> [GRP0] ; 1 -> GRP1
    101  f084		       be 00 f3 	      ldx	logo_4,Y	; 4	 (28) 4 -> X
    102  f087		       b9 4b f3 	      lda	logo_5,Y	; 4	 (32)
    103  f08a		       85 83		      sta	temp2	; 3	 (35)
    104  f08c		       b9 4b f2 	      lda	logo_3,Y	; 4	 (39) 3 -> A
    105  f08f		       a4 83		      ldy	temp2	; 3	 (42) 5 -> Y
    106  f091		       85 1c		      sta	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    107  f093		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    108  f095		       84 1c		      sty	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    109  f097		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    110  f099		       a4 82		      ldy	temp1	; 3	 (57)
    111  f09b		       b9 ff f3 	      lda	logo_colors-1,Y	; 4	 (61)
    112  f09e		       85 06		      sta	COLUP0	; 3	 (64)
    113  f0a0		       85 07		      sta	COLUP1	; 3	 (67)
    114  f0a2		       88		      dey		; 2	 (69)
    115  f0a3		       10 cc		      bpl	LogoLoop	; 3	 (72)
    116  f0a5
    117  f0a5		       a0 00		      ldy	#0
    118  f0a7		       84 1b		      sty	GRP0
    119  f0a9		       84 1c		      sty	GRP1
    120  f0ab		       84 1b		      sty	GRP0
    121  f0ad		       84 1c		      sty	GRP1
    122  f0af							;	ldx #40
    123  f0af		       a2 1f		      ldx	#((96 - (logo_height/2))-1)
    124  f0b1				   LogoGap
    125  f0b1		       85 02		      sta	WSYNC
    126  f0b3		       ca		      dex		; 2	 (2)
    127  f0b4		       d0 fb		      bne	LogoGap	; 2	 (4)
    128  f0b6
    129  f0b6				   LogoOverscanStart
    130  f0b6							; Enable VBLANK
    131  f0b6		       a9 02		      lda	#2
    132  f0b8		       85 01		      sta	VBLANK
    133  f0ba							; overscan
    134  f0ba		       a2 23		      ldx	#35
    135  f0bc		       8e 96 02 	      stx	TIM64T
    136  f0bf		       ad 84 02 	      lda	INTIM
    137  f0c2		       18		      clc
    138  f0c3		       69 80		      adc	#128
    139  f0c5		       8d 96 02 	      sta	TIM64T
    140  f0c8
    141  f0c8
    142  f0c8				   .drawlogo
    143  f0c8		       ad 84 02 	      lda	INTIM
    144  f0cb		       30 fb		      bmi	.drawlogo	; loop until timer expires
    145  f0cd		       4c 0b f0 	      jmp	LogoFrame
    146  f0d0
    147  f0d0					      if	>. != >[.+(logo_height)]
    148  f100		       00 00 00 00*	      align	#256
    149  f100					      endif
    150  f100
    151  f100
    152  f100							; Paste image information here
    153  f100
    154  f100				   logo_0
    155  f100		       00		      .byte.b	#%00000000
    156  f101		       00		      .byte.b	#%00000000
    157  f102		       00		      .byte.b	#%00000000
    158  f103		       00		      .byte.b	#%00000000
    159  f104		       00		      .byte.b	#%00000000
    160  f105		       00		      .byte.b	#%00000000
    161  f106		       00		      .byte.b	#%00000000
    162  f107		       00		      .byte.b	#%00000000
    163  f108		       00		      .byte.b	#%00000000
    164  f109		       00		      .byte.b	#%00000000
    165  f10a		       00		      .byte.b	#%00000000
    166  f10b		       00		      .byte.b	#%00000000
    167  f10c		       00		      .byte.b	#%00000000
    168  f10d		       00		      .byte.b	#%00000000
    169  f10e		       00		      .byte.b	#%00000000
    170  f10f		       00		      .byte.b	#%00000000
    171  f110		       00		      .byte.b	#%00000000
    172  f111		       00		      .byte.b	#%00000000
    173  f112		       00		      .byte.b	#%00000000
    174  f113		       00		      .byte.b	#%00000000
    175  f114		       00		      .byte.b	#%00000000
    176  f115		       00		      .byte.b	#%00000000
    177  f116		       00		      .byte.b	#%00000000
    178  f117		       00		      .byte.b	#%00000000
    179  f118		       00		      .byte.b	#%00000000
    180  f119		       00		      .byte.b	#%00000000
    181  f11a		       00		      .byte.b	#%00000000
    182  f11b		       00		      .byte.b	#%00000000
    183  f11c		       00		      .byte.b	#%00000000
    184  f11d		       00		      .byte.b	#%00000000
    185  f11e		       00		      .byte.b	#%00000000
    186  f11f		       00		      .byte.b	#%00000000
    187  f120		       00		      .byte.b	#%00000000
    188  f121		       00		      .byte.b	#%00000000
    189  f122		       00		      .byte.b	#%00000000
    190  f123		       00		      .byte.b	#%00000000
    191  f124		       00		      .byte.b	#%00000000
    192  f125		       00		      .byte.b	#%00000000
    193  f126		       00		      .byte.b	#%00000000
    194  f127		       00		      .byte.b	#%00000000
    195  f128		       00		      .byte.b	#%00000000
    196  f129		       00		      .byte.b	#%00000000
    197  f12a		       00		      .byte.b	#%00000000
    198  f12b		       00		      .byte.b	#%00000000
    199  f12c		       00		      .byte.b	#%00000000
    200  f12d		       00		      .byte.b	#%00000000
    201  f12e		       00		      .byte.b	#%00000000
    202  f12f		       00		      .byte.b	#%00000000
    203  f130		       00		      .byte.b	#%00000000
    204  f131		       00		      .byte.b	#%00000000
    205  f132		       00		      .byte.b	#%00000000
    206  f133		       00		      .byte.b	#%00000000
    207  f134		       00		      .byte.b	#%00000000
    208  f135		       00		      .byte.b	#%00000000
    209  f136		       00		      .byte.b	#%00000000
    210  f137		       00		      .byte.b	#%00000000
    211  f138		       00		      .byte.b	#%00000000
    212  f139		       00		      .byte.b	#%00000000
    213  f13a		       00		      .byte.b	#%00000000
    214  f13b		       00		      .byte.b	#%00000000
    215  f13c		       00		      .byte.b	#%00000000
    216  f13d		       00		      .byte.b	#%00000000
    217  f13e		       00		      .byte.b	#%00000000
    218  f13f		       00		      .byte.b	#%00000000
    219  f140		       00		      .byte.b	#%00000000
    220  f141		       01		      .byte.b	#%00000001
    221  f142		       01		      .byte.b	#%00000001
    222  f143		       01		      .byte.b	#%00000001
    223  f144		       01		      .byte.b	#%00000001
    224  f145		       00		      .byte.b	#%00000000
    225  f146		       00		      .byte.b	#%00000000
    226  f147		       00		      .byte.b	#%00000000
    227  f148		       00		      .byte.b	#%00000000
    228  f149		       00		      .byte.b	#%00000000
    229  f14a		       00		      .byte.b	#%00000000
    230  f14b
    231  f14b
    232  f14b				  -	      if	>. != >[.+(logo_height)]
    233  f14b				  -	      align	#256
    234  f14b					      endif
    235  f14b
    236  f14b				   logo_1
    237  f14b		       00		      .byte.b	#%00000000
    238  f14c		       00		      .byte.b	#%00000000
    239  f14d		       00		      .byte.b	#%00000000
    240  f14e		       00		      .byte.b	#%00000000
    241  f14f		       31		      .byte.b	#%00110001
    242  f150		       09		      .byte.b	#%00001001
    243  f151		       33		      .byte.b	#%00110011
    244  f152		       19		      .byte.b	#%00011001
    245  f153		       00		      .byte.b	#%00000000
    246  f154		       00		      .byte.b	#%00000000
    247  f155		       22		      .byte.b	#%00100010
    248  f156		       32		      .byte.b	#%00110010
    249  f157		       2b		      .byte.b	#%00101011
    250  f158		       32		      .byte.b	#%00110010
    251  f159		       00		      .byte.b	#%00000000
    252  f15a		       00		      .byte.b	#%00000000
    253  f15b		       00		      .byte.b	#%00000000
    254  f15c		       00		      .byte.b	#%00000000
    255  f15d		       00		      .byte.b	#%00000000
    256  f15e		       00		      .byte.b	#%00000000
    257  f15f		       00		      .byte.b	#%00000000
    258  f160		       00		      .byte.b	#%00000000
    259  f161		       00		      .byte.b	#%00000000
    260  f162		       00		      .byte.b	#%00000000
    261  f163		       00		      .byte.b	#%00000000
    262  f164		       00		      .byte.b	#%00000000
    263  f165		       00		      .byte.b	#%00000000
    264  f166		       00		      .byte.b	#%00000000
    265  f167		       00		      .byte.b	#%00000000
    266  f168		       00		      .byte.b	#%00000000
    267  f169		       00		      .byte.b	#%00000000
    268  f16a		       00		      .byte.b	#%00000000
    269  f16b		       00		      .byte.b	#%00000000
    270  f16c		       00		      .byte.b	#%00000000
    271  f16d		       00		      .byte.b	#%00000000
    272  f16e		       01		      .byte.b	#%00000001
    273  f16f		       03		      .byte.b	#%00000011
    274  f170		       07		      .byte.b	#%00000111
    275  f171		       05		      .byte.b	#%00000101
    276  f172		       07		      .byte.b	#%00000111
    277  f173		       05		      .byte.b	#%00000101
    278  f174		       07		      .byte.b	#%00000111
    279  f175		       05		      .byte.b	#%00000101
    280  f176		       03		      .byte.b	#%00000011
    281  f177		       03		      .byte.b	#%00000011
    282  f178		       01		      .byte.b	#%00000001
    283  f179		       00		      .byte.b	#%00000000
    284  f17a		       00		      .byte.b	#%00000000
    285  f17b		       00		      .byte.b	#%00000000
    286  f17c		       00		      .byte.b	#%00000000
    287  f17d		       00		      .byte.b	#%00000000
    288  f17e		       00		      .byte.b	#%00000000
    289  f17f		       00		      .byte.b	#%00000000
    290  f180		       00		      .byte.b	#%00000000
    291  f181		       00		      .byte.b	#%00000000
    292  f182		       1d		      .byte.b	#%00011101
    293  f183		       15		      .byte.b	#%00010101
    294  f184		       15		      .byte.b	#%00010101
    295  f185		       15		      .byte.b	#%00010101
    296  f186		       00		      .byte.b	#%00000000
    297  f187		       00		      .byte.b	#%00000000
    298  f188		       00		      .byte.b	#%00000000
    299  f189		       00		      .byte.b	#%00000000
    300  f18a		       00		      .byte.b	#%00000000
    301  f18b		       00		      .byte.b	#%00000000
    302  f18c		       d2		      .byte.b	#%11010010
    303  f18d		       17		      .byte.b	#%00010111
    304  f18e		       92		      .byte.b	#%10010010
    305  f18f		       d1		      .byte.b	#%11010001
    306  f190		       00		      .byte.b	#%00000000
    307  f191		       00		      .byte.b	#%00000000
    308  f192		       00		      .byte.b	#%00000000
    309  f193		       00		      .byte.b	#%00000000
    310  f194		       00		      .byte.b	#%00000000
    311  f195		       00		      .byte.b	#%00000000
    312  f196
    313  f196
    314  f196					      if	>. != >[.+(logo_height)]
    315  f200		       00 00 00 00*	      align	#256
    316  f200					      endif
    317  f200
    318  f200				   logo_2
    319  f200		       00		      .byte.b	#%00000000
    320  f201		       00		      .byte.b	#%00000000
    321  f202		       00		      .byte.b	#%00000000
    322  f203		       00		      .byte.b	#%00000000
    323  f204		       39		      .byte.b	#%00111001
    324  f205		       2a		      .byte.b	#%00101010
    325  f206		       a9		      .byte.b	#%10101001
    326  f207		       00		      .byte.b	#%00000000
    327  f208		       00		      .byte.b	#%00000000
    328  f209		       00		      .byte.b	#%00000000
    329  f20a		       aa		      .byte.b	#%10101010
    330  f20b		       aa		      .byte.b	#%10101010
    331  f20c		       08		      .byte.b	#%00001000
    332  f20d		       2a		      .byte.b	#%00101010
    333  f20e		       00		      .byte.b	#%00000000
    334  f20f		       00		      .byte.b	#%00000000
    335  f210		       00		      .byte.b	#%00000000
    336  f211		       00		      .byte.b	#%00000000
    337  f212		       00		      .byte.b	#%00000000
    338  f213		       00		      .byte.b	#%00000000
    339  f214		       00		      .byte.b	#%00000000
    340  f215		       00		      .byte.b	#%00000000
    341  f216		       00		      .byte.b	#%00000000
    342  f217		       00		      .byte.b	#%00000000
    343  f218		       00		      .byte.b	#%00000000
    344  f219		       00		      .byte.b	#%00000000
    345  f21a		       00		      .byte.b	#%00000000
    346  f21b		       00		      .byte.b	#%00000000
    347  f21c		       00		      .byte.b	#%00000000
    348  f21d		       0c		      .byte.b	#%00001100
    349  f21e		       06		      .byte.b	#%00000110
    350  f21f		       03		      .byte.b	#%00000011
    351  f220		       01		      .byte.b	#%00000001
    352  f221		       3f		      .byte.b	#%00111111
    353  f222		       d1		      .byte.b	#%11010001
    354  f223		       f9		      .byte.b	#%11111001
    355  f224		       55		      .byte.b	#%01010101
    356  f225		       ff		      .byte.b	#%11111111
    357  f226		       55		      .byte.b	#%01010101
    358  f227		       ff		      .byte.b	#%11111111
    359  f228		       55		      .byte.b	#%01010101
    360  f229		       fe		      .byte.b	#%11111110
    361  f22a		       56		      .byte.b	#%01010110
    362  f22b		       fc		      .byte.b	#%11111100
    363  f22c		       58		      .byte.b	#%01011000
    364  f22d		       f0		      .byte.b	#%11110000
    365  f22e		       00		      .byte.b	#%00000000
    366  f22f		       00		      .byte.b	#%00000000
    367  f230		       00		      .byte.b	#%00000000
    368  f231		       00		      .byte.b	#%00000000
    369  f232		       00		      .byte.b	#%00000000
    370  f233		       00		      .byte.b	#%00000000
    371  f234		       00		      .byte.b	#%00000000
    372  f235		       00		      .byte.b	#%00000000
    373  f236		       00		      .byte.b	#%00000000
    374  f237		       25		      .byte.b	#%00100101
    375  f238		       25		      .byte.b	#%00100101
    376  f239		       71		      .byte.b	#%01110001
    377  f23a		       24		      .byte.b	#%00100100
    378  f23b		       00		      .byte.b	#%00000000
    379  f23c		       00		      .byte.b	#%00000000
    380  f23d		       00		      .byte.b	#%00000000
    381  f23e		       00		      .byte.b	#%00000000
    382  f23f		       00		      .byte.b	#%00000000
    383  f240		       00		      .byte.b	#%00000000
    384  f241		       75		      .byte.b	#%01110101
    385  f242		       65		      .byte.b	#%01100101
    386  f243		       76		      .byte.b	#%01110110
    387  f244		       00		      .byte.b	#%00000000
    388  f245		       00		      .byte.b	#%00000000
    389  f246		       00		      .byte.b	#%00000000
    390  f247		       00		      .byte.b	#%00000000
    391  f248		       00		      .byte.b	#%00000000
    392  f249		       00		      .byte.b	#%00000000
    393  f24a		       00		      .byte.b	#%00000000
    394  f24b
    395  f24b
    396  f24b				  -	      if	>. != >[.+(logo_height)]
    397  f24b				  -	      align	#256
    398  f24b					      endif
    399  f24b
    400  f24b				   logo_3
    401  f24b		       00		      .byte.b	#%00000000
    402  f24c		       00		      .byte.b	#%00000000
    403  f24d		       00		      .byte.b	#%00000000
    404  f24e		       00		      .byte.b	#%00000000
    405  f24f		       a4		      .byte.b	#%10100100
    406  f250		       aa		      .byte.b	#%10101010
    407  f251		       84		      .byte.b	#%10000100
    408  f252		       a0		      .byte.b	#%10100000
    409  f253		       00		      .byte.b	#%00000000
    410  f254		       00		      .byte.b	#%00000000
    411  f255		       c4		      .byte.b	#%11000100
    412  f256		       4a		      .byte.b	#%01001010
    413  f257		       64		      .byte.b	#%01100100
    414  f258		       00		      .byte.b	#%00000000
    415  f259		       00		      .byte.b	#%00000000
    416  f25a		       00		      .byte.b	#%00000000
    417  f25b		       00		      .byte.b	#%00000000
    418  f25c		       00		      .byte.b	#%00000000
    419  f25d		       00		      .byte.b	#%00000000
    420  f25e		       00		      .byte.b	#%00000000
    421  f25f		       00		      .byte.b	#%00000000
    422  f260		       00		      .byte.b	#%00000000
    423  f261		       00		      .byte.b	#%00000000
    424  f262		       00		      .byte.b	#%00000000
    425  f263		       00		      .byte.b	#%00000000
    426  f264		       00		      .byte.b	#%00000000
    427  f265		       00		      .byte.b	#%00000000
    428  f266		       00		      .byte.b	#%00000000
    429  f267		       00		      .byte.b	#%00000000
    430  f268		       18		      .byte.b	#%00011000
    431  f269		       30		      .byte.b	#%00110000
    432  f26a		       60		      .byte.b	#%01100000
    433  f26b		       c0		      .byte.b	#%11000000
    434  f26c		       fe		      .byte.b	#%11111110
    435  f26d		       c5		      .byte.b	#%11000101
    436  f26e		       4f		      .byte.b	#%01001111
    437  f26f		       55		      .byte.b	#%01010101
    438  f270		       7f		      .byte.b	#%01111111
    439  f271		       55		      .byte.b	#%01010101
    440  f272		       7f		      .byte.b	#%01111111
    441  f273		       55		      .byte.b	#%01010101
    442  f274		       3f		      .byte.b	#%00111111
    443  f275		       35		      .byte.b	#%00110101
    444  f276		       1f		      .byte.b	#%00011111
    445  f277		       0d		      .byte.b	#%00001101
    446  f278		       07		      .byte.b	#%00000111
    447  f279		       00		      .byte.b	#%00000000
    448  f27a		       00		      .byte.b	#%00000000
    449  f27b		       00		      .byte.b	#%00000000
    450  f27c		       00		      .byte.b	#%00000000
    451  f27d		       00		      .byte.b	#%00000000
    452  f27e		       00		      .byte.b	#%00000000
    453  f27f		       00		      .byte.b	#%00000000
    454  f280		       00		      .byte.b	#%00000000
    455  f281		       00		      .byte.b	#%00000000
    456  f282		       4c		      .byte.b	#%01001100
    457  f283		       d4		      .byte.b	#%11010100
    458  f284		       cd		      .byte.b	#%11001101
    459  f285		       00		      .byte.b	#%00000000
    460  f286		       00		      .byte.b	#%00000000
    461  f287		       00		      .byte.b	#%00000000
    462  f288		       00		      .byte.b	#%00000000
    463  f289		       00		      .byte.b	#%00000000
    464  f28a		       00		      .byte.b	#%00000000
    465  f28b		       00		      .byte.b	#%00000000
    466  f28c		       10		      .byte.b	#%00010000
    467  f28d		       19		      .byte.b	#%00011001
    468  f28e		       14		      .byte.b	#%00010100
    469  f28f		       18		      .byte.b	#%00011000
    470  f290		       00		      .byte.b	#%00000000
    471  f291		       00		      .byte.b	#%00000000
    472  f292		       00		      .byte.b	#%00000000
    473  f293		       00		      .byte.b	#%00000000
    474  f294		       00		      .byte.b	#%00000000
    475  f295		       00		      .byte.b	#%00000000
    476  f296
    477  f296
    478  f296					      if	>. != >[.+(logo_height)]
    479  f300		       00 00 00 00*	      align	#256
    480  f300					      endif
    481  f300
    482  f300				   logo_4
    483  f300		       00		      .byte.b	#%00000000
    484  f301		       00		      .byte.b	#%00000000
    485  f302		       00		      .byte.b	#%00000000
    486  f303		       00		      .byte.b	#%00000000
    487  f304		       00		      .byte.b	#%00000000
    488  f305		       00		      .byte.b	#%00000000
    489  f306		       00		      .byte.b	#%00000000
    490  f307		       00		      .byte.b	#%00000000
    491  f308		       00		      .byte.b	#%00000000
    492  f309		       00		      .byte.b	#%00000000
    493  f30a		       44		      .byte.b	#%01000100
    494  f30b		       e4		      .byte.b	#%11100100
    495  f30c		       4e		      .byte.b	#%01001110
    496  f30d		       24		      .byte.b	#%00100100
    497  f30e		       00		      .byte.b	#%00000000
    498  f30f		       00		      .byte.b	#%00000000
    499  f310		       00		      .byte.b	#%00000000
    500  f311		       00		      .byte.b	#%00000000
    501  f312		       00		      .byte.b	#%00000000
    502  f313		       00		      .byte.b	#%00000000
    503  f314		       00		      .byte.b	#%00000000
    504  f315		       00		      .byte.b	#%00000000
    505  f316		       00		      .byte.b	#%00000000
    506  f317		       00		      .byte.b	#%00000000
    507  f318		       00		      .byte.b	#%00000000
    508  f319		       00		      .byte.b	#%00000000
    509  f31a		       00		      .byte.b	#%00000000
    510  f31b		       00		      .byte.b	#%00000000
    511  f31c		       00		      .byte.b	#%00000000
    512  f31d		       00		      .byte.b	#%00000000
    513  f31e		       00		      .byte.b	#%00000000
    514  f31f		       00		      .byte.b	#%00000000
    515  f320		       00		      .byte.b	#%00000000
    516  f321		       00		      .byte.b	#%00000000
    517  f322		       80		      .byte.b	#%10000000
    518  f323		       c0		      .byte.b	#%11000000
    519  f324		       60		      .byte.b	#%01100000
    520  f325		       f0		      .byte.b	#%11110000
    521  f326		       50		      .byte.b	#%01010000
    522  f327		       f0		      .byte.b	#%11110000
    523  f328		       50		      .byte.b	#%01010000
    524  f329		       f0		      .byte.b	#%11110000
    525  f32a		       50		      .byte.b	#%01010000
    526  f32b		       e0		      .byte.b	#%11100000
    527  f32c		       60		      .byte.b	#%01100000
    528  f32d		       c0		      .byte.b	#%11000000
    529  f32e		       00		      .byte.b	#%00000000
    530  f32f		       00		      .byte.b	#%00000000
    531  f330		       00		      .byte.b	#%00000000
    532  f331		       00		      .byte.b	#%00000000
    533  f332		       00		      .byte.b	#%00000000
    534  f333		       00		      .byte.b	#%00000000
    535  f334		       00		      .byte.b	#%00000000
    536  f335		       00		      .byte.b	#%00000000
    537  f336		       00		      .byte.b	#%00000000
    538  f337		       9c		      .byte.b	#%10011100
    539  f338		       98		      .byte.b	#%10011000
    540  f339		       dc		      .byte.b	#%11011100
    541  f33a		       80		      .byte.b	#%10000000
    542  f33b		       00		      .byte.b	#%00000000
    543  f33c		       00		      .byte.b	#%00000000
    544  f33d		       00		      .byte.b	#%00000000
    545  f33e		       00		      .byte.b	#%00000000
    546  f33f		       00		      .byte.b	#%00000000
    547  f340		       00		      .byte.b	#%00000000
    548  f341		       94		      .byte.b	#%10010100
    549  f342		       55		      .byte.b	#%01010101
    550  f343		       99		      .byte.b	#%10011001
    551  f344		       00		      .byte.b	#%00000000
    552  f345		       00		      .byte.b	#%00000000
    553  f346		       00		      .byte.b	#%00000000
    554  f347		       00		      .byte.b	#%00000000
    555  f348		       00		      .byte.b	#%00000000
    556  f349		       00		      .byte.b	#%00000000
    557  f34a		       00		      .byte.b	#%00000000
    558  f34b
    559  f34b
    560  f34b				  -	      if	>. != >[.+(logo_height)]
    561  f34b				  -	      align	#256
    562  f34b					      endif
    563  f34b
    564  f34b				   logo_5
    565  f34b		       00		      .byte.b	#%00000000
    566  f34c		       00		      .byte.b	#%00000000
    567  f34d		       00		      .byte.b	#%00000000
    568  f34e		       00		      .byte.b	#%00000000
    569  f34f		       00		      .byte.b	#%00000000
    570  f350		       00		      .byte.b	#%00000000
    571  f351		       00		      .byte.b	#%00000000
    572  f352		       00		      .byte.b	#%00000000
    573  f353		       00		      .byte.b	#%00000000
    574  f354		       00		      .byte.b	#%00000000
    575  f355		       00		      .byte.b	#%00000000
    576  f356		       00		      .byte.b	#%00000000
    577  f357		       00		      .byte.b	#%00000000
    578  f358		       00		      .byte.b	#%00000000
    579  f359		       00		      .byte.b	#%00000000
    580  f35a		       00		      .byte.b	#%00000000
    581  f35b		       00		      .byte.b	#%00000000
    582  f35c		       00		      .byte.b	#%00000000
    583  f35d		       00		      .byte.b	#%00000000
    584  f35e		       00		      .byte.b	#%00000000
    585  f35f		       00		      .byte.b	#%00000000
    586  f360		       00		      .byte.b	#%00000000
    587  f361		       00		      .byte.b	#%00000000
    588  f362		       00		      .byte.b	#%00000000
    589  f363		       00		      .byte.b	#%00000000
    590  f364		       00		      .byte.b	#%00000000
    591  f365		       00		      .byte.b	#%00000000
    592  f366		       00		      .byte.b	#%00000000
    593  f367		       00		      .byte.b	#%00000000
    594  f368		       00		      .byte.b	#%00000000
    595  f369		       00		      .byte.b	#%00000000
    596  f36a		       00		      .byte.b	#%00000000
    597  f36b		       00		      .byte.b	#%00000000
    598  f36c		       00		      .byte.b	#%00000000
    599  f36d		       00		      .byte.b	#%00000000
    600  f36e		       00		      .byte.b	#%00000000
    601  f36f		       00		      .byte.b	#%00000000
    602  f370		       00		      .byte.b	#%00000000
    603  f371		       00		      .byte.b	#%00000000
    604  f372		       00		      .byte.b	#%00000000
    605  f373		       00		      .byte.b	#%00000000
    606  f374		       00		      .byte.b	#%00000000
    607  f375		       00		      .byte.b	#%00000000
    608  f376		       00		      .byte.b	#%00000000
    609  f377		       00		      .byte.b	#%00000000
    610  f378		       00		      .byte.b	#%00000000
    611  f379		       00		      .byte.b	#%00000000
    612  f37a		       00		      .byte.b	#%00000000
    613  f37b		       00		      .byte.b	#%00000000
    614  f37c		       00		      .byte.b	#%00000000
    615  f37d		       00		      .byte.b	#%00000000
    616  f37e		       00		      .byte.b	#%00000000
    617  f37f		       00		      .byte.b	#%00000000
    618  f380		       00		      .byte.b	#%00000000
    619  f381		       00		      .byte.b	#%00000000
    620  f382		       00		      .byte.b	#%00000000
    621  f383		       00		      .byte.b	#%00000000
    622  f384		       00		      .byte.b	#%00000000
    623  f385		       00		      .byte.b	#%00000000
    624  f386		       00		      .byte.b	#%00000000
    625  f387		       00		      .byte.b	#%00000000
    626  f388		       00		      .byte.b	#%00000000
    627  f389		       00		      .byte.b	#%00000000
    628  f38a		       00		      .byte.b	#%00000000
    629  f38b		       00		      .byte.b	#%00000000
    630  f38c		       c0		      .byte.b	#%11000000
    631  f38d		       40		      .byte.b	#%01000000
    632  f38e		       00		      .byte.b	#%00000000
    633  f38f		       c0		      .byte.b	#%11000000
    634  f390		       00		      .byte.b	#%00000000
    635  f391		       00		      .byte.b	#%00000000
    636  f392		       00		      .byte.b	#%00000000
    637  f393		       00		      .byte.b	#%00000000
    638  f394		       00		      .byte.b	#%00000000
    639  f395		       00		      .byte.b	#%00000000
    640  f396
    641  f396
    642  f396					      if	>. != >[.+(logo_height)]
    643  f400		       00 00 00 00*	      align	#256
    644  f400					      endif
    645  f400
    646  f400				   logo_colors
    647  f400		       c0		      .byte.b	#$C0
    648  f401		       c0		      .byte.b	#$C0
    649  f402		       c0		      .byte.b	#$C0
    650  f403		       c0		      .byte.b	#$C0
    651  f404		       c0		      .byte.b	#$C0
    652  f405		       c0		      .byte.b	#$C0
    653  f406		       c0		      .byte.b	#$C0
    654  f407		       c0		      .byte.b	#$C0
    655  f408		       c0		      .byte.b	#$C0
    656  f409		       c0		      .byte.b	#$C0
    657  f40a		       c0		      .byte.b	#$C0
    658  f40b		       c0		      .byte.b	#$C0
    659  f40c		       c0		      .byte.b	#$C0
    660  f40d		       c0		      .byte.b	#$C0
    661  f40e		       c2		      .byte.b	#$C2
    662  f40f		       c2		      .byte.b	#$C2
    663  f410		       c2		      .byte.b	#$C2
    664  f411		       c2		      .byte.b	#$C2
    665  f412		       c2		      .byte.b	#$C2
    666  f413		       c2		      .byte.b	#$C2
    667  f414		       c2		      .byte.b	#$C2
    668  f415		       c2		      .byte.b	#$C2
    669  f416		       c2		      .byte.b	#$C2
    670  f417		       c2		      .byte.b	#$C2
    671  f418		       c4		      .byte.b	#$C4
    672  f419		       c4		      .byte.b	#$C4
    673  f41a		       c4		      .byte.b	#$C4
    674  f41b		       c4		      .byte.b	#$C4
    675  f41c		       c4		      .byte.b	#$C4
    676  f41d		       c4		      .byte.b	#$C4
    677  f41e		       c4		      .byte.b	#$C4
    678  f41f		       c4		      .byte.b	#$C4
    679  f420		       c4		      .byte.b	#$C4
    680  f421		       c4		      .byte.b	#$C4
    681  f422		       c6		      .byte.b	#$C6
    682  f423		       c6		      .byte.b	#$C6
    683  f424		       c6		      .byte.b	#$C6
    684  f425		       c6		      .byte.b	#$C6
    685  f426		       c6		      .byte.b	#$C6
    686  f427		       c6		      .byte.b	#$C6
    687  f428		       c6		      .byte.b	#$C6
    688  f429		       c6		      .byte.b	#$C6
    689  f42a		       c6		      .byte.b	#$C6
    690  f42b		       c6		      .byte.b	#$C6
    691  f42c		       c8		      .byte.b	#$C8
    692  f42d		       c8		      .byte.b	#$C8
    693  f42e		       c8		      .byte.b	#$C8
    694  f42f		       c8		      .byte.b	#$C8
    695  f430		       c8		      .byte.b	#$C8
    696  f431		       c8		      .byte.b	#$C8
    697  f432		       c8		      .byte.b	#$C8
    698  f433		       c8		      .byte.b	#$C8
    699  f434		       c8		      .byte.b	#$C8
    700  f435		       c8		      .byte.b	#$C8
    701  f436		       ca		      .byte.b	#$CA
    702  f437		       ca		      .byte.b	#$CA
    703  f438		       ca		      .byte.b	#$CA
    704  f439		       ca		      .byte.b	#$CA
    705  f43a		       ca		      .byte.b	#$CA
    706  f43b		       ca		      .byte.b	#$CA
    707  f43c		       ca		      .byte.b	#$CA
    708  f43d		       ca		      .byte.b	#$CA
    709  f43e		       ca		      .byte.b	#$CA
    710  f43f		       ca		      .byte.b	#$CA
    711  f440		       cc		      .byte.b	#$CC
    712  f441		       cc		      .byte.b	#$CC
    713  f442		       cc		      .byte.b	#$CC
    714  f443		       cc		      .byte.b	#$CC
    715  f444		       cc		      .byte.b	#$CC
    716  f445		       cc		      .byte.b	#$CC
    717  f446		       cc		      .byte.b	#$CC
    718  f447		       cc		      .byte.b	#$CC
    719  f448		       cc		      .byte.b	#$CC
    720  f449		       cc		      .byte.b	#$CC
    721  f44a		       ce		      .byte.b	#$CE
    722  f44b
    723  f44b							; end of ROM Cartridge
    724  fffc					      org	$FFFC
    725  fffc		       00 f0		      word.w	Reset
    726  fffe		       00 f0		      word.w	Reset
